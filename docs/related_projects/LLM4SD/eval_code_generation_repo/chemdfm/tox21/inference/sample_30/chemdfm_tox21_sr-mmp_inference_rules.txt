def rule1_halogenated_aromatics(mol):
    aromatic_halogen_count = 0
    for atom in mol.GetAtoms():
        if atom.GetAtomicNum() in [9, 17, 35, 53] and atom.GetIsAromatic():  # F, Cl, Br, I
            aromatic_halogen_count += 1
    return aromatic_halogen_count

def rule2_electron_withdrawing_groups(mol):
    ewg_count = 0
    for atom in mol.GetAtoms():
        if atom.GetIsAromatic():
            for neighbor in atom.GetNeighbors():
                if neighbor.GetAtomicNum() in [7, 8, 9, 17, 35, 53] or neighbor.GetSymbol() == 'N+':
                    ewg_count += 1
    return ewg_count

def rule3_reactive_functional_groups(mol):
    aldehyde_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[CX3H1](=O)')))
    aromatic_amines_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('c-nc')))
    sulfides_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#16X2H0]')))
    return aldehyde_count + aromatic_amines_count + sulfides_count

def rule4_molecular_weight(mol):
    return Descriptors.MolWt(mol)

def rule4_structural_complexity(mol):
    return Descriptors.NumRotatableBonds(mol)

def rule5_cationic_charge(mol):
    positive_charge_count = 0
    for atom in mol.GetAtoms():
        if atom.GetFormalCharge() > 0:
            positive_charge_count += 1
    return positive_charge_count

def rule6_heavy_metals(mol):
    # List of common heavy metals in organic compounds
    heavy_metals = ['Zn', 'Hg', 'Pb', 'Cd', 'As', 'Se', 'Sn']
    count = 0
    for atom in mol.GetAtoms():
        if atom.GetSymbol() in heavy_metals:
            count += 1
    return count

def rule7_amphipathic(mol):
    # Using logP as a proxy for amphipathic properties; molecules with a logP between -0.4 and 5.6
    # are considered to have amphipathic properties
    logP = Descriptors.MolLogP(mol)
    return 1 if -0.4 <= logP <= 5.6 else 0

def rule8_reactive_groups(mol):
    try:
        # SMARTS pattern for peroxide groups (R-O-O-R)
        peroxide_smarts = '[OX2]O[OX2]'
        peroxide_query = Chem.MolFromSmarts(peroxide_smarts)
        if peroxide_query is None:
            return 0  # Return 0 if the SMARTS pattern is incorrect or fails to compile
        peroxides = len(mol.GetSubstructMatches(peroxide_query))
        return peroxides
    except Exception:
        return 0  # Return 0 in case of any exceptions during processing


def rule9_structural_features(mol):
    # Count of aromatic rings fused to another heterocyclic ring
    fused_rings = rdMolDescriptors.CalcNumAromaticRings(mol) - rdMolDescriptors.CalcNumAromaticHeterocycles(mol)
    return fused_rings


