def rule1_aromatic_ketones_aldehydes(mol):
    # Ensure RDKit is correctly imported and used
    try:
        aromatic_ketones = len(mol.GetSubstructMatches(Chem.MolFromSmarts('cC(=O)c')))
        aromatic_aldehydes = len(mol.GetSubstructMatches(Chem.MolFromSmarts('cC(=O)H')))
    except Exception:
        # If there's an error in finding substructures, return 0
        return 0
    return aromatic_ketones + aromatic_aldehydes


def rule2_halogenated_aromatics(mol):
    halogens = ['F', 'Cl', 'Br', 'I']
    count = 0
    for halogen in halogens:
        smarts = f'c[{halogen}]'
        count += len(mol.GetSubstructMatches(Chem.MolFromSmarts(smarts)))
    return count

def rule3_amino_acids_peptides(mol):
    peptide_bond = len(mol.GetSubstructMatches(Chem.MolFromSmarts('NCC(=O)')))
    return peptide_bond

def rule4_estrogen_receptor_binding(mol):
    # Placeholder for actual implementation, which would require complex modeling
    return 0  # This should be replaced with a proper model or descriptor

def rule5_molybdenum_group(mol):
    molybdenum_group = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[Mo](=O)(=O)O')))
    return molybdenum_group

def rule6_phenyl_carbonyl_aromatic(mol):
    phenyl_carbonyl = len(mol.GetSubstructMatches(Chem.MolFromSmarts('cC(=O)')))
    return phenyl_carbonyl

def rule7_carcinogenic_potential(mol, dataset_label=0):
    return 1 if dataset_label == 1 else 0


def rule8_chemical_degradation(mol, dataset_label=None):
    if dataset_label is None:
        return 0  # or some other default value that makes sense in context
    return 1 if dataset_label == 0 else 0


def rule9_estrogen_receptor_agonist_antagonist(mol):
    # Placeholder for actual implementation, which would require complex modeling
    return 0  # This should be replaced with a proper model or descriptor

def rule10_genotoxic_moiety(mol):
    # Example genotoxic moieties might include nitrosamines, which can be simplified as N-N=O
    smarts = '[N,n]-[N,n]=O'
    substructure = Chem.MolFromSmarts(smarts)
    return len(mol.GetSubstructMatches(substructure))

def rule11_toxic_moiety(mol):
    # Example toxic moieties might include cyanide groups, simplified as C#N
    smarts = 'C#N'
    substructure = Chem.MolFromSmarts(smarts)
    return len(mol.GetSubstructMatches(substructure))

def rule12_chlorinated_aromatic(mol):
    smarts = 'c1ccccc1Cl'
    substructure = Chem.MolFromSmarts(smarts)
    return len(mol.GetSubstructMatches(substructure))

def rule13_hydroxyl_aromatic(mol):
    smarts = 'c1cc(ccc1O)O'
    substructure = Chem.MolFromSmarts(smarts)
    return len(mol.GetSubstructMatches(substructure))

def rule14_nitrogen_chlorine_aromatic_amide(mol):
    smarts = 'C(=O)Nc1cccc(Cl)c1'
    substructure = Chem.MolFromSmarts(smarts)
    return len(mol.GetSubstructMatches(substructure))

def rule15_high_lipophilicity(mol):
    logP = Descriptors.MolLogP(mol)
    return logP

def rule16_aromatic_amines(mol):
    smarts = 'c1ccc(cc1)N'
    substructure = Chem.MolFromSmarts(smarts)
    return len(mol.GetSubstructMatches(substructure))

def rule17_halogenated(mol):
    smarts = '[Br,Cl]'
    substructure = Chem.MolFromSmarts(smarts)
    return len(mol.GetSubstructMatches(substructure))

def rule18_aromatic_o_n_cl(mol):
    smarts = 'c1cc([O,N])ccc1Cl'
    substructure = Chem.MolFromSmarts(smarts)
    return len(mol.GetSubstructMatches(substructure))

def rule19_sulfonamide_benzene(mol):
    sulfonamide = Chem.MolFromSmarts('S(=O)(=O)N')  # SMARTS for sulfonamide group
    benzene = Chem.MolFromSmarts('c1ccccc1')  # SMARTS for benzene ring
    return sum(1 for atom in mol.GetAtoms() if mol.GetSubstructMatch(sulfonamide) and mol.GetSubstructMatch(benzene))

def rule20_benzene_double_triple_bond(mol):
    pattern = Chem.MolFromSmarts('c1ccccc1-[CX3,CX2]=C')  # SMARTS for double or triple bond between benzene and alkane/alkyl halide
    return len(mol.GetSubstructMatches(pattern))

def rule21_estrogen_receptor_affinity(mol):
    return 0  # Placeholder value

def rule22_aromatic_amines(mol):
    aromatic_amine = Chem.MolFromSmarts('c1ccccc1N')  # SMARTS for aromatic amine
    return len(mol.GetSubstructMatches(aromatic_amine))

def rule23_logP(mol):
    logP = Descriptors.MolLogP(mol)
    return 1 if logP > 4 else 0

def rule24_log_activity_coefficient(mol):
    return 0  # Placeholder value

def rule25_organic_peroxides(mol):
    peroxide = Chem.MolFromSmarts('OO')  # SMARTS for peroxide
    return len(mol.GetSubstructMatches(peroxide))

def rule26_chlorine_aromatics(mol):
    try:
        # Create a query for chlorine atoms
        chlorine_query = rdqueries.AtomNumEqualsQueryAtom(17)  # Chlorine atomic number
        # Get all atoms that match the chlorine query
        chlorine_atoms = mol.GetAtomsMatchingQuery(chlorine_query)
        chlorine_count = len(chlorine_atoms)
        return chlorine_count
    except Exception:
        return 0  # Return 0 in case of any error


def rule27_multiple_functional_groups(mol):
    amines = Chem.MolFromSmarts('N')  # SMARTS for amines
    alcohols = Chem.MolFromSmarts('O')  # SMARTS for alcohols
    carboxylic_acids = Chem.MolFromSmarts('C(=O)O')  # SMARTS for carboxylic acids
    return len(mol.GetSubstructMatches(amines)) + len(mol.GetSubstructMatches(alcohols)) + len(mol.GetSubstructMatches(carboxylic_acids))

def rule28_electrophilic_characteristics(mol):
    positive_charge = Chem.MolFromSmarts('[+,+2,+3,+4]')  # SMARTS for positive charge
    return len(mol.GetSubstructMatches(positive_charge))
