def rule1_hb_donors(mol):
    return rdMolDescriptors.CalcNumHBD(mol) >= 2

def rule2_hb_acceptor(mol):
    return rdMolDescriptors.CalcNumHBA(mol) >= 3

def rule3_logP(mol):
    return Descriptors.MolLogP(mol) > 5

def rule4_size(mol):
    return rdkit.Chem.rdMolDescriptors.CalcExactMolWt(mol) > 500

def rule5_aromatic(mol):
    return rdkit.Chem.rdMolDescriptors.CalcNumAromaticRings(mol) > 0

def rule6_nitrogen(mol):
    return rdkit.Chem.rdMolDescriptors.CalcNumHeterocycles(mol) > 0

def rule7_halogen_substituents(mol):
    halogen_substituents = 0
    for atom in mol.GetAtoms():
        if atom.GetSymbol() in ['F', 'Cl', 'Br', 'I']:
            for neighbor in atom.GetNeighbors():
                if neighbor.GetSymbol() == 'C' and neighbor.GetIsAromatic():
                    halogen_substituents += 1
    return halogen_substituents

def rule8_amide_bonds(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#7][C](=[O])[#6]')))

def rule9_glycosidic_linkages(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#8][#6][#8]')))

def rule10_sulfur_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#16](=[O])(=[O])')))

def rule11_long_alkyl_chains(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]-[#6]-[#6]-[#6]-[#6]')))


def rule12_ketone_moieties(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6](=[O])')))

def rule13_ester_functionalities(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6](=[O])[O][#6]')))

def rule15_secondary_alcohols(mol):
    secondary_alcohols = 0
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'O' and atom.GetDegree() == 2:
            if all(neighbor.GetSymbol() == 'C' for neighbor in atom.GetNeighbors()):
                secondary_alcohols += 1
    return secondary_alcohols

def rule16_tertiary_amines(mol):
    tertiary_amines = 0
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'N' and atom.GetDegree() == 3:
            if all(neighbor.GetSymbol() == 'C' for neighbor in atom.GetNeighbors()):
                tertiary_amines += 1
    return tertiary_amines

def rule17_quaternary_ammonium(mol):
    quaternary_ammonium = 0
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'N' and atom.GetFormalCharge() == 1 and atom.GetDegree() == 4:
            quaternary_ammonium += 1
    return quaternary_ammonium

def rule18_polycyclic(mol):
    return rdMolDescriptors.CalcNumRings(mol)

def rule19_metal_complex(mol):
    metals = ['Li', 'Be', 'Na', 'Mg', 'Al', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']
    metal_complex = 0
    for atom in mol.GetAtoms():
        if atom.GetSymbol() in metals:
            metal_complex += 1
    return metal_complex
