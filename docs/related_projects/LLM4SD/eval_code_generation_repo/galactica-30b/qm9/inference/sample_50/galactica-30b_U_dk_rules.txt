def rule1_electronegative_atoms(mol):
    electronegative_atoms = [atom.GetAtomicNum() for atom in mol.GetAtoms() if atom.GetSymbol() in ['O', 'N', 'F']]
    return len(electronegative_atoms)

def rule2_multiple_bonds(mol):
    multiple_bonds = [bond.GetBondTypeAsDouble() for bond in mol.GetBonds() if bond.GetBondTypeAsDouble() > 1]
    return len(multiple_bonds)

def rule3_functional_groups(mol):
    functional_groups = mol.GetRingInfo().NumRings()
    return functional_groups



def rule5_branching(mol):
    branching = sum([1 for atom in mol.GetAtoms() if atom.GetDegree() > 2])
    return branching

def rule6_chiral_centers(mol):
    chiral_centers = rdMolDescriptors.CalcNumAtomStereoCenters(mol)
    return chiral_centers

def rule7_ez_isomerism(mol):
    ez_isomerism = rdMolDescriptors.CalcNumUnspecifiedAtomStereoCenters(mol)
    return ez_isomerism

def rule8_charged_groups(mol):
    charged_groups = sum([1 for atom in mol.GetAtoms() if atom.GetFormalCharge() != 0])
    return charged_groups

def rule9_hydrocarbons(mol):
    hydrocarbons = sum([1 for atom in mol.GetAtoms() if atom.GetSymbol() in ['C', 'H']])

def rule10_alkyl_halides(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[CX4][F,Cl,Br,I]')))

def rule11_molecular_symmetry(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule12_ring_strain(mol):
    return len(mol.GetRingInfo().AtomRings())

def rule13_lone_pair_electrons(mol):
    return sum([atom.GetTotalNumHs() for atom in mol.GetAtoms()])

def rule14_electronegative_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[F,Cl,Br,I]')))

def rule15_molecular_weight(mol):
    return Descriptors.MolWt(mol)

def rule16_resonance_structures(input):
    if isinstance(input, list) and len(input) > 0:  # Check if the input is a list and is not empty
        return input[0]  # Return the first element of the list
    else:
        return 0  # Return 0 if the input is not a list or the list is empty


def rule17_alkene_alkyne_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[CX3]=[CX3]'))) + len(mol.GetSubstructMatches(Chem.MolFromSmarts('[CX2]#C')))

def rule18_ring_size(mol):
    return len([ring for ring in mol.GetRingInfo().AtomRings() if len(ring) < 5])

def rule20_hydrogen_bonding(mol):
    return rdMolDescriptors.CalcNumHBD(mol) + rdMolDescriptors.CalcNumHBA(mol)

def rule21_degree_of_unsaturation(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol) + rdMolDescriptors.CalcNumAliphaticRings(mol)

def rule22_heterocyclic_rings(mol):
    return rdMolDescriptors.CalcNumHeterocycles(mol)

def rule23_symmetry(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule27_polar_groups(mol):
    return rdMolDescriptors.CalcNumHBD(mol) + rdMolDescriptors.CalcNumHBA(mol)

def rule30_electron_donating_groups(mol):
    electron_donating_groups = ['[OH]', '[NH2]', '[OCH3]']
    count = 0
    for group in electron_donating_groups:
        count += len(mol.GetSubstructMatches(Chem.MolFromSmarts(group)))
    return count

def rule31_larger_atoms(mol):
    larger_atoms = ['[I]', '[Br]', '[S]', '[P]', '[Cl]']
    count = 0
    for atom in larger_atoms:
        count += len(mol.GetSubstructMatches(Chem.MolFromSmarts(atom)))
    return count

def rule32_hydrogen_bonding(mol):
    return rdMolDescriptors.CalcNumHBD(mol) + rdMolDescriptors.CalcNumHBA(mol)

def rule33_different_elements(mol):
    return len(set([atom.GetSymbol() for atom in mol.GetAtoms()]))

def rule34_carbon_chain_length(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]')))

def rule35_molar_mass(mol):
    return Descriptors.MolWt(mol)

def rule36_potential_nucleophiles(mol):
    potential_nucleophiles = ['[OH]', '[NH2]']
    count = 0
    for group in potential_nucleophiles:
        count += len(mol.GetSubstructMatches(Chem.MolFromSmarts(group)))
    return count

def rule37_substituent_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[a;!H0]')))

def rule39_resonance_forms(mol):
    try:
        mol = Chem.MolFromSmiles(mol)
        res = AllChem.GenerateResonanceStructures(mol)
        return len(list(res))
    except:
        return 0


def rule40_strained_ring_systems(mol):
    return rdMolDescriptors.CalcNumSpiroAtoms(mol)

def rule41_surface_area(mol):
    return rdMolDescriptors.CalcTPSA(mol)

def rule42_stereogenic_centers(mol):
    return rdMolDescriptors.CalcNumAtomStereoCenters(mol)


def rule43_intramolecular_hbonds(mol):
    return rdMolDescriptors.CalcNumHBD(mol)

def rule44_symmetry(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule49_polar_bonds(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule50_complexity(mol):
    return rdMolDescriptors.CalcNumAliphaticRings(mol) + rdMolDescriptors.CalcNumAromaticRings(mol)

def rule4_resonance_structures(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule5_positively_charged_atoms(mol):
    return rdMolDescriptors.CalcNumAmideBonds(mol)

def rule6_size_complexity(mol):
    return mol.GetNumAtoms()

def rule7_saturated_carbons(mol):
    return rdMolDescriptors.CalcNumAliphaticCarbocycles(mol)

def rule8_halogen_atoms(mol):
    return rdMolDescriptors.CalcNumHeteroatoms(mol)

def rule9_alkyl_groups(mol):
    return rdMolDescriptors.CalcNumAliphaticRings(mol)

def rule10_symmetry(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule12_sp3_carbon_atoms(mol):
    return rdMolDescriptors.CalcFractionCSP3(mol)

def rule13_num_atoms(mol):
    return mol.GetNumAtoms()

def rule14_branched_chains(mol):
    return rdMolDescriptors.CalcNumAliphaticCarbocycles(mol)

def rule15_stereochemistry(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule16_molecular_weight(mol):
    return rdMolDescriptors.CalcExactMolWt(mol)

def rule17_polarizable_atoms(mol):
    return rdMolDescriptors.CalcNumHeavyAtoms(mol)

def rule18_molecular_polarity(mol):
    return rdMolDescriptors.CalcTPSA(mol)

def rule19_unpaired_electrons(mol):
    unpaired_electrons = 0
    for atom in mol.GetAtoms():
        unpaired_electrons += atom.GetNumRadicalElectrons()
    return unpaired_electrons


def rule21_unstable_reactive_groups(mol):
    azide_pattern = Chem.MolFromSmarts('[N-]=[N+]=[N-]')
    peroxide_pattern = Chem.MolFromSmarts('O-O')
    azide_count = len(mol.GetSubstructMatches(azide_pattern))
    peroxide_count = len(mol.GetSubstructMatches(peroxide_pattern))
    return azide_count + peroxide_count

def rule22_metal_ions(mol):
    metal_pattern = Chem.MolFromSmarts('[#21,#22,#23,#24,#25,#26,#27,#28,#29,#30,#31,#32,#33,#34,#35,#80,#81,#82,#83,#84]')
    return len(mol.GetSubstructMatches(metal_pattern))

def rule23_conjugated_systems(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule24_hydrogen_bonds(mol):
    return rdMolDescriptors.CalcNumHBD(mol) + rdMolDescriptors.CalcNumHBA(mol)

def rule25_lone_pairs(mol):
    return sum([atom.GetTotalNumHs() for atom in mol.GetAtoms()])

def rule26_electron_donating_groups(mol):
    edg_pattern = Chem.MolFromSmarts('[N,O]')
    return len(mol.GetSubstructMatches(edg_pattern))

def rule27_electron_withdrawing_groups(mol):
    ewg_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(ewg_pattern)) + len(mol.GetSubstructMatches(halogen_pattern))

def rule28_negative_hyperconjugation(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule29_unsaturation(mol):
    num_double_bonds = len([bond for bond in mol.GetBonds() if bond.GetBondType() == Chem.rdchem.BondType.DOUBLE])
    return rdMolDescriptors.CalcNumAliphaticRings(mol) + num_double_bonds


def rule36_oxidation_state(mol):
    try:
        molecule = Chem.MolFromSmiles(mol)
        atoms = molecule.GetAtoms()
        oxidation_state = 0
        for atom in atoms:
            oxidation_state += atom.GetFormalCharge()
        return oxidation_state
    except:
        return 0


def rule41_multicentric_molecules(mol):
    return len(Chem.GetMolFrags(mol, asMols=True))

def rule42_isotope_presence(mol):
    return sum([atom.GetIsotope() for atom in mol.GetAtoms()])

def rule48_coordination_compounds(mol):
    return sum([atom.GetAtomicNum() in range(21, 31) for atom in mol.GetAtoms()])
