def calculate_molecular_weight(mol):
    return rdMolDescriptors.CalcExactMolWt(mol)

def count_hb_donors(mol):
    return rdMolDescriptors.CalcNumHBD(mol)

def count_hb_acceptors(mol):
    return rdMolDescriptors.CalcNumHBA(mol)

def calculate_logP(mol):
    return rdMolDescriptors.CalcCrippenDescriptors(mol)[0]

def count_rotatable_bonds(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def calculate_TPSA(mol):
    return rdMolDescriptors.CalcTPSA(mol)

def count_aromatic_rings(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule7_XLogP3(mol):
    return Descriptors.MolLogP(mol)

def rule8_reactive_func_groups(mol):
    return rdMolDescriptors.CalcNumRings(mol)

def rule9_molar_refractivity(mol):
    return Descriptors.MolMR(mol)

def rule10_stereocenters(mol):
    return len(Chem.FindMolChiralCenters(mol, includeUnassigned=True))

def rule11_lipinski_violations(mol):
    return rdMolDescriptors.CalcNumLipinskiHBA(mol) + rdMolDescriptors.CalcNumLipinskiHBD(mol)

def rule12_lead_like_violations(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule13_PAINS_alerts(mol):
    # This is a placeholder function as rdkit does not have a built-in function to calculate PAINS alerts
    return 0

def rule14_Brenk_violations(mol):
    # This is a placeholder function as rdkit does not have a built-in function to calculate Brenk violations
    return 0

def rule16_muegge_violations(mol):
    return rdMolDescriptors.CalcNumRings(mol)












def rule22_structural_alerts(mol):
    return rdMolDescriptors.CalcNumRings(mol)




def rule24_brenk_substructures(lst):
    if isinstance(lst, list):  # Check if the input is a list
        if len(lst) > 0:  # Check if the list is not empty
            return lst[0]  # Return the first element of the list
        else:
            return 0  # Return 0 if the list is empty
    else:
        return 0  # Return 0 if the input is not a list


def rule25_veber_substructures(mol):
    num_rotatable_bonds = rdMolDescriptors.CalcNumRotatableBonds(mol)
    polar_surface_area = rdMolDescriptors.CalcTPSA(mol)
    return num_rotatable_bonds, polar_surface_area






