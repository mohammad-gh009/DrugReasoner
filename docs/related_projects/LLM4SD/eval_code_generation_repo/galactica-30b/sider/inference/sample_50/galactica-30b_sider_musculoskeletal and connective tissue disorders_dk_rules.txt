def rule1_musculoskeletal_adverse_effects(mol):
    pattern = Chem.MolFromSmarts('[#16,#11;R0]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule2_aromatic_rings(mol):
    return Descriptors.NumAromaticRings(mol)

def rule3_sulfonamide_nitro_groups(mol):
    pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule4_halogen_benzene(mol):
    pattern = Chem.MolFromSmarts('c1ccccc1[F,Cl]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule5_carbonyl_aromatic(mol):
    pattern = Chem.MolFromSmarts('C=O')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule6_sodium_ion(mol):
    pattern = Chem.MolFromSmarts('[Na+]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule7_bromine_atom(mol):
    pattern = Chem.MolFromSmarts('[Br]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule8_musculoskeletal_adverse_effects(mol):
    carboxyl = Chem.MolFromSmarts('C(=O)O')
    amide = Chem.MolFromSmarts('C(=O)N')
    double_bond = Chem.MolFromSmarts('C=C')
    benzene = Chem.MolFromSmarts('c1ccccc1')
    return mol.HasSubstructMatch(carboxyl) + mol.HasSubstructMatch(amide) + mol.HasSubstructMatch(double_bond) + mol.HasSubstructMatch(benzene)

def rule9_musculoskeletal_adverse_effects(mol):
    return len(mol.GetAtoms()), len(mol.GetBonds())

def rule10_musculoskeletal_adverse_effects(mol):
    nitro = Chem.MolFromSmarts('[N+](=O)[O-]')
    return mol.HasSubstructMatch(nitro)

def rule11_musculoskeletal_adverse_effects(mol):
    sulfonamide = Chem.MolFromSmarts('S(=O)(=O)N')
    amine = Chem.MolFromSmarts('N')
    gadolinium = Chem.MolFromSmarts('[Gd+3]')
    long_chain = Chem.MolFromSmarts('C=C')
    return mol.HasSubstructMatch(sulfonamide) + mol.HasSubstructMatch(amine) + mol.HasSubstructMatch(gadolinium) + mol.HasSubstructMatch(long_chain)

def rule1_musculoskeletal_adverse_effects(mol):
    sulfonamide = Chem.MolFromSmarts('S(=O)(=O)N')
    return mol.HasSubstructMatch(sulfonamide)

def rule2_musculoskeletal_adverse_effects(mol):
    benzimidazole = Chem.MolFromSmarts('n1c2ccccc2[nH]c1')
    return mol.HasSubstructMatch(benzimidazole)

def rule3_musculoskeletal_adverse_effects(mol):
    chlorine = Chem.MolFromSmarts('c1cc(Cl)ccc1')

def rule4_contains_iodine(mol):
    iodine_count = len(mol.GetSubstructMatches(Chem.MolFromSmiles('I')))
    return iodine_count

def rule5_contains_magnesium(mol):
    magnesium_count = len(mol.GetSubstructMatches(Chem.MolFromSmiles('[Mg+]')))
    return magnesium_count

def rule6_contains_sulfonate_or_zinc(mol):
    sulfonate_count = len(mol.GetSubstructMatches(Chem.MolFromSmiles('S(=O)(=O)[O-]')))
    zinc_count = len(mol.GetSubstructMatches(Chem.MolFromSmiles('[Zn+]')))
    return sulfonate_count + zinc_count

def rule7_contains_carbonyl_two_aromatics(mol):
    carbonyl_two_aromatics_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('c1ccccc1C(=O)c1ccccc1')))
    return carbonyl_two_aromatics_count

def rule8_contains_carbonyl(mol):
    carbonyl_count = len(mol.GetSubstructMatches(Chem.MolFromSmiles('C=O')))
    return carbonyl_count

def rule9_contains_heterocyclic_nitrogen(mol):
    heterocyclic_nitrogen_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('n1ccccc1')))
    return heterocyclic_nitrogen_count

def rule10_contains_fluorine(mol):
    fluorine_count = len(mol.GetSubstructMatches(Chem.MolFromSmiles('F')))
    return fluorine_count

def rule11_contains_double_bonds_or_aromatics(mol):
    double_bonds_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('*=*')))
    aromatic_rings_count = len(Chem.GetSymmSSSR(Chem.DeleteSubstructs(mol, Chem.MolFromSmarts('[!c]'))))
    return double_bonds_count + aromatic_rings_count
