def rule1_carboxylate_group(mol):
    return Fragments.fr_COO(mol)

def rule2_conjugated_system(mol):
    return Descriptors.NumAromaticCarbocycles(mol)

def rule3_heterocyclic_nitrogen(mol):
    return Fragments.fr_nitro_arom_nonortho(mol)

def rule4_sulfonamide_group(mol):
    return rdkit.Chem.Fragments.fr_NH0(mol)


def rule5_nitro_group(mol):
    return Fragments.fr_nitro(mol)

def rule6_halogen_benzene(mol):
    return Fragments.fr_halogen(mol)

def rule7_no2_coo_group(mol):
    return Fragments.fr_nitro(mol) + Fragments.fr_COO(mol)

def rule8_substructure(mol):
    substructure = Chem.MolFromSmarts('CN(C)C/C=C/C(=O)NC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC(=C(C=C3)F)Cl)O[C@@H]4CCOC4')
    return len(mol.GetSubstructMatches(substructure))

def rule9_func_groups(mol):
    carbonyl = Chem.MolFromSmarts('C=O')
    amide = Chem.MolFromSmarts('C(=O)N')
    return len(mol.GetSubstructMatches(carbonyl)) + len(mol.GetSubstructMatches(amide))

def rule10_func_groups(mol):
    nitro = Chem.MolFromSmarts('N(=O)=O')
    carboxyl = Chem.MolFromSmarts('C(=O)O')
    return len(mol.GetSubstructMatches(nitro)) + len(mol.GetSubstructMatches(carboxyl))

def rule11_func_groups(mol):
    func_group1 = Chem.MolFromSmarts('CC(C)C(=O)OC1=C(C=C(C=C1)CO)[C@H](CCN(C(C)C)C(C)C)C2=CC=CO=C2')
    func_group2 = Chem.MolFromSmarts('CN1CCN(CC1)C(C2=CC=CC=C2)C3=CC=CC=C3')
    return len(mol.GetSubstructMatches(func_group1)) + len(mol.GetSubstructMatches(func_group2))

def rule12_func_groups(mol):
    sulfonamide = Chem.MolFromSmarts('S(=O)(=O)N')
    nitro = Chem.MolFromSmarts('N(=O)=O')
    amide = Chem.MolFromSmarts('C(=O)N')
    halogen = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(sulfonamide)) + len(mol.GetSubstructMatches(nitro)) + len(mol.GetSubstructMatches(amide)) + len(mol.GetSubstructMatches(halogen))

def rule13_func_groups(mol):
    from rdkit import Chem

    sulfonyl = Chem.MolFromSmarts('[#16](=[#8])(=[#8])-[*]')
    nitro = Chem.MolFromSmarts('[#7](=[#8])-[#8]')
    aromatic = Chem.MolFromSmarts('c1ccccc1')

    sulfonyl_count = len(mol.GetSubstructMatches(sulfonyl))
    nitro_count = len(mol.GetSubstructMatches(nitro))
    aromatic_count = len(mol.GetSubstructMatches(aromatic))

    return sulfonyl_count + nitro_count + aromatic_count


def rule14_func_groups(mol):
    chlorine = Chem.MolFromSmarts('[Cl]')
    nitro = Chem.MolFromSmarts('N(=O)=O')
    sulfhydryl = Chem.MolFromSmarts('S')
    return len(mol.GetSubstructMatches(chlorine)) + len(mol.GetSubstructMatches(nitro)) + len(mol.GetSubstructMatches(sulfhydryl))

def rule15_func_groups(mol):
    sulfonamide = Chem.MolFromSmarts('S(=O)(=O)N')
    nitro = Chem.MolFromSmarts('N(=O)=O')
    iodine = Chem.MolFromSmarts('[I]')
    calcium = Chem.MolFromSmarts('[Ca]')
    chlorine = Chem.MolFromSmarts('[Cl]')
    sulfhydryl = Chem.MolFromSmarts('S')

def rule1_carbonyl_group(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('C=O')))

def rule2_halogen_atom(mol):
    halogens = ['F', 'Cl', 'Br', 'I']
    return sum(len(mol.GetSubstructMatches(Chem.MolFromSmiles(x))) for x in halogens)

def rule3_sulfonamide_group(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('S(=O)(=O)N')))


def rule4_platinum(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('[Pt]')))

def rule5_chlorine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('Cl')))

def rule6_sulfonyl_group(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('S(=O)(=O)')))

def rule7_sulfonamide_group(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('S(=O)(=O)N')))

def rule9_halogen_benzene(mol):
    pattern = Chem.MolFromSmarts('[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(pattern))

def rule10_cyano_nitro(mol):
    cyano_pattern = Chem.MolFromSmarts('[#6]#[#7]')
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(cyano_pattern)) + len(mol.GetSubstructMatches(nitro_pattern))

def rule11_carbonyl_alkene(mol):
    pattern = Chem.MolFromSmarts('[#6]=[#6]-[#6]=[#8]')
    return len(mol.GetSubstructMatches(pattern))

def rule12_metal_ion(mol):
    pattern = Chem.MolFromSmarts('[Na+,Fe+3]')
    return len(mol.GetSubstructMatches(pattern))

def rule13_sulfonyl_nitro(mol):
    sulfonyl_pattern = Chem.MolFromSmarts('S(=O)(=O)-[!#1]')
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(sulfonyl_pattern)) + len(mol.GetSubstructMatches(nitro_pattern))



def rule15_halogen_enzyme_inhibitor(mol):
    pattern = Chem.MolFromSmarts('[F,Cl,Br,I]-[#6]')
    return len(mol.GetSubstructMatches(pattern))

def rule16_sulfonyl_brain_effect(mol):
    pattern = Chem.MolFromSmarts('S(=O)(=O)-[!#1]')
