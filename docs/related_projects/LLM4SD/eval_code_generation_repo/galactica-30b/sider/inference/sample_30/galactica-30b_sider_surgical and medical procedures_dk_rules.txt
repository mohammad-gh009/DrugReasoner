def rule1_contains_sulfonamide(mol):
    pattern = Chem.MolFromSmarts('[#16](=[#8])(=[#8])-[#7]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule2_contains_nitro(mol):
    pattern = Chem.MolFromSmarts('[#7](-[#8])=[#8]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule3_contains_sulfonamide_and_nitro(mol):
    return rule1_contains_sulfonamide(mol) and rule2_contains_nitro(mol)

def rule4_contains_halogen(mol):
    pattern = Chem.MolFromSmarts('[#9,#17,#35,#53]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule5_contains_CCOO_or_CCON(mol):
    pattern1 = Chem.MolFromSmarts('CC(=O)O')
    pattern2 = Chem.MolFromSmarts('CC(=O)N')
    matches1 = mol.GetSubstructMatches(pattern1)
    matches2 = mol.GetSubstructMatches(pattern2)
    return len(matches1) or len(matches2)

def rule6_contains_metal(mol):
    pattern = Chem.MolFromSmarts('[#47,#64,#24,#34,#11,#26,#25]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule7_contains_cyano_or_carboxylic_acid(mol):
    pattern1 = Chem.MolFromSmarts('C#N')
    pattern2 = Chem.MolFromSmarts('C(=O)O')
    matches1 = mol.GetSubstructMatches(pattern1)
    matches2 = mol.GetSubstructMatches(pattern2)
    return len(matches1) or len(matches2)

def rule8_contains_risky_functional_groups(mol):
    pattern1 = Chem.MolFromSmarts('[#16](=[#8])(=[#8])')
    pattern2 = Chem.MolFromSmarts('C(=O)')
    pattern3 = Chem.MolFromSmarts('C(=O)O')
    pattern4 = Chem.MolFromSmarts('C#N')
    matches1 = mol.GetSubstructMatches(pattern1)
    matches2 = mol.GetSubstructMatches(pattern2)
    matches3 = mol.GetSubstructMatches(pattern3)
    matches4 = mol.GetSubstructMatches(pattern4)
    return len(matches1) or len(matches2) or len(matches3) or len(matches4)

def rule9_sulfonamide_conjugated_system(mol):
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    conjugated_system_pattern = Chem.MolFromSmarts('C=C-C=C')
    return mol.GetSubstructMatches(sulfonamide_pattern) + mol.GetSubstructMatches(conjugated_system_pattern)

def rule10_chlorine_nitro_amide(mol):
    chlorine_pattern = Chem.MolFromSmarts('ClC')
    nitro_amide_pattern = Chem.MolFromSmarts('N(=O)C(=O)N')
    return mol.GetSubstructMatches(chlorine_pattern) + mol.GetSubstructMatches(nitro_amide_pattern)

def rule11_substructure(mol):
    substructure_pattern = Chem.MolFromSmarts('C[C@@H](C(=O)O)N')
    return mol.GetSubstructMatches(substructure_pattern)

def rule12_nitrile(mol):
    nitrile_pattern = Chem.MolFromSmarts('C#N')
    return mol.GetSubstructMatches(nitrile_pattern)

def rule13_sulfonyl(mol):
    sulfonyl_pattern = Chem.MolFromSmarts('S(=O)(=O)')
    return mol.GetSubstructMatches(sulfonyl_pattern)

def rule14_nitrogen_carbonyl(mol):
    nitrogen_carbonyl_pattern = Chem.MolFromSmarts('NC(=O)N')
    return mol.GetSubstructMatches(nitrogen_carbonyl_pattern)

def rule15_carbonyl(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return mol.GetSubstructMatches(carbonyl_pattern)

def rule16_nitro_fluorine(mol):
    nitro_pattern = Chem.MolFromSmarts('N(=O)=O')
    fluorine_pattern = Chem.MolFromSmarts('F')
    return mol.GetSubstructMatches(nitro_pattern) + mol.GetSubstructMatches(fluorine_pattern)

def rule17_metal_ion(mol):
    gallium_pattern = Chem.MolFromSmarts('[Ga]')
    gadolinium_pattern = Chem.MolFromSmarts('[Gd]')

def rule1_contains_chlorine(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('Cl')))

def rule2_multiple_rings(mol):
    return rdMolDescriptors.CalcNumRings(mol)

def rule3_contains_nitro(mol):
    if isinstance(mol, str):
        mol = Chem.MolFromSmiles(mol)
        nitro = Chem.MolFromSmiles('N(=O)=O')
        return len(mol.GetSubstructMatches(nitro))
    else:
        return 0


def rule4_contains_CCOO_CCON(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('CC(=O)O'))) + len(mol.GetSubstructMatches(Chem.MolFromSmiles('CC(=O)N')))

def rule5_contains_metal(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('[Ag]'))) + len(mol.GetSubstructMatches(Chem.MolFromSmiles('[Gd]')))

def rule6_contains_nitro(mol):
    nitro = Chem.MolFromSmiles('N(=O)=O')
    if nitro is not None:
        return len(mol.GetSubstructMatches(nitro))
    else:
        return 0


def rule7_contains_sulfonamide(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('S(=O)(=O)N')))

def rule8_contains_furan(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('c1ccoc1')))

def rule9_two_identical_func_groups(mol):
    # This is a bit tricky as it depends on what functional groups we are looking for
    # Here, I'll just use carboxyl group as an example
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('C(=O)O'))) >= 2
