def rule3_calculate_logP(mol):
    return Descriptors.MolLogP(mol)

def rule4_reactive_groups(mol):
    return rdMolDescriptors.CalcNumAliphaticRings(mol) + rdMolDescriptors.CalcNumAromaticRings(mol)

def rule5_molecular_weight(mol):
    return Descriptors.MolWt(mol)

def rule6_metal_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("[#80,#82,#48]")))

def rule7_hb_donors_acceptors(mol):
    return rdMolDescriptors.CalcNumHBD(mol) + rdMolDescriptors.CalcNumHBA(mol)

def rule8_polar_surface_area(mol):
    return rdMolDescriptors.CalcTPSA(mol)

def rule9_rotatable_bonds(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule_aromatic_rings(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)



def rule_volume(mol):
    return rdMolDescriptors.CalcExactMolWt(mol)

def rule_halogen_atoms(mol):
    return rdMolDescriptors.CalcNumHeteroatoms(mol)

def rule_nitrogen_atoms(mol):
    nitrogen_atoms = mol.GetSubstructMatches(Chem.MolFromSmiles('N'))
    return len(nitrogen_atoms)


def rule_sulfur_atoms(mol):
    total_heteroatoms = Chem.rdMolDescriptors.CalcNumHeteroatoms(mol)
    total_nitrogen_atoms = len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 7])
    total_oxygen_atoms = len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 8])
    total_sulfur_atoms = total_heteroatoms - total_nitrogen_atoms - total_oxygen_atoms
    return total_sulfur_atoms


def rule_oxygen_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('O')))

def rule_oxygen_atoms(mol):
    if isinstance(mol, str):
        mol = Chem.MolFromSmiles(mol)
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('O')))


def rule_size_shape(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule_charged_groups(mol):
    return rdMolDescriptors.CalcNumLipinskiHBA(mol) + rdMolDescriptors.CalcNumLipinskiHBD(mol)
