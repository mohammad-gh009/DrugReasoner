def rule1_func_groups(mol):
    func_groups = ['CCONHC(=O)', 'CNS(=O)(=O)C', 'COCP(=O)(OP(=O)(OC1CCCCC1)OC1CCCCC1)']
    func_groups_mols = [Chem.MolFromSmiles(group) for group in func_groups if Chem.MolFromSmiles(group) is not None]

    for group_mol in func_groups_mols:
        if mol.HasSubstructMatch(group_mol):
            return 1
    return 0


def rule2_halogen_atoms(mol):
    halogens = [9, 17, 35, 53]  # F, Cl, Br, I
    return sum(atom.GetAtomicNum() in halogens for atom in mol.GetAtoms())

def rule3_toxic_groups(mol):
    toxic_groups = ['[N+](=O)[O-]', 'N[NH3+]', 'CC(=O)O', 'OS(=O)(=O)O', 'C#N', '[Si](=O)(=O)', 'S', 'C=O', 'C#N', 'c1ccccc1']
    return sum(mol.HasSubstructMatch(Chem.MolFromSmiles(group)) for group in toxic_groups)

def rule4_simple_structures(mol):
    return rdMolDescriptors.CalcExactMolWt(mol), Chem.GetSSSR(mol), len(Chem.FindMolChiralCenters(mol, includeUnassigned=True))

def rule5_admet_properties(mol):
    return rdMolDescriptors.CalcExactMolWt(mol), Descriptors.MolLogP(mol)

def rule6_steriochemistry(mol):
    return len(Chem.FindMolChiralCenters(mol, includeUnassigned=True)), all(atom.GetAtomicNum() in [1, 6] for atom in mol.GetAtoms())

def rule7_polar_groups(mol):
    polar_groups = ['[N+]', 'C=O', 'C(=O)O', 'O', 'S']
    return sum(mol.HasSubstructMatch(Chem.MolFromSmiles(group)) for group in polar_groups)

def rule9_compound_flexibility(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule9_aromatic_rings(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule10_negatively_charged_groups(mol):
    sulfonate = Chem.MolFromSmarts('S(=O)(=O)[O-]')
    phosphate = Chem.MolFromSmarts('P(=O)([O-])O')
    return len(mol.GetSubstructMatches(sulfonate)) + len(mol.GetSubstructMatches(phosphate))




def rule2_stability_reactivity(mol):
    aldehyde_smarts = '[CX3H1](=O)[#6]'
    ketone_smarts = '[#6][CX3](=O)[#6]'
    aldehyde_pattern = Chem.MolFromSmarts(aldehyde_smarts)
    ketone_pattern = Chem.MolFromSmarts(ketone_smarts)
    num_aldehydes = len(mol.GetSubstructMatches(aldehyde_pattern))
    num_ketones = len(mol.GetSubstructMatches(ketone_pattern))
    return num_aldehydes + num_ketones




def rule4_functional_group(mol):
    amide_pattern = Chem.MolFromSmarts('C(=O)N')
    return len(mol.GetSubstructMatches(amide_pattern))


def rule5_halogen_atoms(mol):
    halogens = ['F', 'Cl', 'Br', 'I']
    return len([atom for atom in mol.GetAtoms() if atom.GetSymbol() in halogens])


def rule6_sulfonamide_group(mol):
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    return len(mol.GetSubstructMatches(sulfonamide_pattern))


def rule7_carbonyl_group(mol):
    pattern = '[#6][#6](=[O])'
    carbonyl = Chem.MolFromSmarts(pattern)
    return len(mol.GetSubstructMatches(carbonyl))


def rule8_sulfonyl_sulfate(mol):
    sulfonyl_sulfate_pattern = Chem.MolFromSmarts('[#16](=[O])(-[#6])-[#16](=[O])-[#8]')
    return len(mol.GetSubstructMatches(sulfonyl_sulfate_pattern))

def rule9_fluorinated_compounds(mol):
    fluorine_pattern = Chem.MolFromSmarts('[#9]')
    return len(mol.GetSubstructMatches(fluorine_pattern))

def rule10_no_nitro_groups(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule11_mol_weight_lipophilicity(mol):
    return Descriptors.MolWt(mol), Descriptors.MolLogP(mol)

def rule12_hb_donors_acceptors(mol):
    return rdMolDescriptors.CalcNumHBD(mol), rdMolDescriptors.CalcNumHBA(mol)

def rule13_chlorine_atoms(mol):
    chlorine_pattern = Chem.MolFromSmarts('[#17]')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule14_carbonyls_carboxylic_acids(mol):
    carbonyl_pattern = Chem.MolFromSmarts('[#6]=[#8]')
    carboxylic_acid_pattern = Chem.MolFromSmarts('[#6](=[#8])-[#8]')
    return len(mol.GetSubstructMatches(carbonyl_pattern)), len(mol.GetSubstructMatches(carboxylic_acid_pattern))

def rule16_polar_func_groups(mol):
    return rdMolDescriptors.CalcNumAliphaticRings(mol)

def rule17_double_bonds(mol):
    return rdMolDescriptors.CalcNumAliphaticCarbocycles(mol)

def rule18_halogen_atoms(mol):
    return rdMolDescriptors.CalcNumHeteroatoms(mol)

def rule19_neutral_compounds(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule20_toxicophore_groups(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule21_pos_charged_func_groups(mol):
    return rdMolDescriptors.CalcNumAromaticCarbocycles(mol)

def rule22_high_aqueous_solubility(mol):
    return rdMolDescriptors.CalcNumAliphaticRings(mol)

def rule23_absence_toxic_func_groups(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule26_halogens_toxicity(mol):
    halogens = ['F', 'Cl', 'Br', 'I']
    atoms = mol.GetAtoms()
    count = sum(1 for atom in atoms if atom.GetSymbol() in halogens)
    return count

def rule28_neutral_molecules(mol):
    return Chem.rdmolops.GetFormalCharge(mol)

def rule29_nitrogen_heterocycles(mol):
    nitrogen_heterocycles = 0
    for ring in mol.GetRingInfo().AtomRings():
        if any(mol.GetAtomWithIdx(atom_idx).GetSymbol() == 'N' for atom_idx in ring):
            nitrogen_heterocycles += 1
    return nitrogen_heterocycles

def rule30_carbonyl_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]=[#8]')))

def rule31_halogenated_molecules(mol):
    halogens = ['F', 'Cl', 'Br', 'I']
    atoms = mol.GetAtoms()
    count = sum(1 for atom in atoms if atom.GetSymbol() in halogens)
    return count

def rule33_complex_structure(mol):
    return len(Chem.FindMolChiralCenters(mol, includeUnassigned=True))

def rule34_toxicophore_groups(mol):
    sulfonyl_pattern = Chem.MolFromSmarts('S(=O)(=O)')
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return mol.GetSubstructMatches(sulfonyl_pattern) + mol.GetSubstructMatches(carbonyl_pattern)

def rule35_charged_groups(mol):
    ammonium_pattern = Chem.MolFromSmarts('[NX4]')
    carboxylate_pattern = Chem.MolFromSmarts('C(=O)[O-]')
    return mol.GetSubstructMatches(ammonium_pattern) + mol.GetSubstructMatches(carboxylate_pattern)

def rule36_molecular_weight(mol):
    return Descriptors.MolWt(mol)

def rule37_hydro_balance(mol):
    return Descriptors.MolLogP(mol)

def rule38_neg_oxygen(mol):
    pattern = Chem.MolFromSmarts('[OX1]-[CX4]-[CX4]')
    if pattern is not None:
        return len(mol.GetSubstructMatches(pattern))
    else:
        return 0


def rule39_toxic_compounds(mol):
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    fluorine_pattern = Chem.MolFromSmarts('F[C@H]1CCCCC1')
    charged_nitrogen_pattern = Chem.MolFromSmarts('[NX3+]C')
    return mol.GetSubstructMatches(sulfonamide_pattern) + mol.GetSubstructMatches(nitro_pattern) + mol.GetSubstructMatches(fluorine_pattern) + mol.GetSubstructMatches(charged_nitrogen_pattern)

def rule40_nitrogen_heterocycles(mol):
    pyrimidine_pattern = Chem.MolFromSmarts('c1ncccn1')
    triazole_pattern = Chem.MolFromSmarts('c1nncn1')
    indole_pattern = Chem.MolFromSmarts('c1ccc2c(c1)ccn2')
    return mol.GetSubstructMatches(pyrimidine_pattern) + mol.GetSubstructMatches(triazole_pattern) + mol.GetSubstructMatches(indole_pattern)

def rule41_fda_approval(mol):
    toxic_functional_groups = rule34_toxicophore_groups(mol) + rule35_charged_groups(mol) + rule39_toxic_compounds(mol)
    complex_structures = rule33_complex_structure(mol)
    neutral_or_positive_charges = Chem.rdmolops.GetFormalCharge(mol)
