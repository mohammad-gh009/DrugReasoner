def rule1_halogen_toxicity(mol):
    halogens = ['F', 'Cl']
    for atom in mol.GetAtoms():
        if atom.GetSymbol() in halogens:
            return 1
    return 0

def rule2_bromine_toxicity(mol):
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'Br':
            return 1
    return 0

def rule3_cyano_toxicity(mol):
    cyano_pattern = Chem.MolFromSmarts('[#6]#[#7]')
    return mol.HasSubstructMatch(cyano_pattern)

def rule4_benzene_toxicity(mol):
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
    return mol.HasSubstructMatch(benzene_pattern)

def rule5_sulfonyl_toxicity(mol):
    sulfonyl_pattern = Chem.MolFromSmarts('S(=O)(=O)[#6]')
    return mol.HasSubstructMatch(sulfonyl_pattern)

def rule6_carbonyl_sulfonyl_toxicity(mol):
    carbonyl_pattern = Chem.MolFromSmarts('[#6]=[#8]')
    sulfonyl_pattern = Chem.MolFromSmarts('S(=O)(=O)[#6]')
    return mol.HasSubstructMatch(carbonyl_pattern) or mol.HasSubstructMatch(sulfonyl_pattern)

def rule7_halogen_toxicity(mol):
    halogens = ['Br', 'Cl']
    for atom in mol.GetAtoms():
        if atom.GetSymbol() in halogens:
            return 0
    return 1

def rule8_nitro_toxicity(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')

def rule9_toxic_effects(mol):
    sulfonyl = mol.GetSubstructMatches(Chem.MolFromSmarts('S(=O)(=O)'))
    nitro = mol.GetSubstructMatches(Chem.MolFromSmarts('N(=O)=O'))
    return len(sulfonyl) + len(nitro)

def rule10_toxic_effects(mol):
    cyano = mol.GetSubstructMatches(Chem.MolFromSmarts('C#N'))
    carbamate = mol.GetSubstructMatches(Chem.MolFromSmarts('NC(=O)O'))
    return len(cyano) + len(carbamate)

def rule11_toxic_effects(mol):
    aromatic = mol.GetAromaticAtoms()
    return len(aromatic)

def rule12_toxic_activity(mol):
    bromine = mol.GetSubstructMatches(Chem.MolFromSmarts('Br'))
    chlorine = mol.GetSubstructMatches(Chem.MolFromSmarts('Cl'))
    return len(bromine) + len(chlorine)

def rule13_toxic_activity(mol):
    sulfonate = mol.GetSubstructMatches(Chem.MolFromSmarts('S(=O)(=O)[O-]'))
    return len(sulfonate)

def rule14_toxic_effects(mol):
    sulfonyl = mol.GetSubstructMatches(Chem.MolFromSmarts('S(=O)(=O)'))
    nitro = mol.GetSubstructMatches(Chem.MolFromSmarts('N(=O)=O'))
    return len(sulfonyl) + len(nitro)

def rule15_toxic_activity(mol):
    phosphate = mol.GetSubstructMatches(Chem.MolFromSmarts('P(=O)(O)(O)O'))
    return len(phosphate)

def rule16_toxic_activity(mol):
    chlorine = mol.GetSubstructMatches(Chem.MolFromSmarts('Cl'))
    carbonyl = mol.GetSubstructMatches(Chem.MolFromSmarts('C=O'))

def rule17_toxicity(mol):
    nitro_group = mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]'))
    halogen_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts('[Cl,Br,I]'))
    return len(nitro_group) + len(halogen_atoms)

def rule18_toxicity(mol):
    sulfonyl_group = mol.GetSubstructMatches(Chem.MolFromSmarts('[S](=O)(=O)'))
    carbonyl_group = mol.GetSubstructMatches(Chem.MolFromSmarts('[C]=O'))
    return len(sulfonyl_group) + len(carbonyl_group)

def rule1_toxicity(mol):
    bromine_atom = mol.GetSubstructMatches(Chem.MolFromSmarts('[Br]'))
    carbonyl_group = mol.GetSubstructMatches(Chem.MolFromSmarts('[C]=O'))
    return len(bromine_atom) + len(carbonyl_group)

def rule2_toxicity(mol):
    carbon_double_bond = mol.GetSubstructMatches(Chem.MolFromSmarts('[C]=[C]'))
    carbonyl_group = mol.GetSubstructMatches(Chem.MolFromSmarts('[C]=O'))
    return len(carbon_double_bond) + len(carbonyl_group)

def rule3_toxicity(mol):
    sulfur_atom = mol.GetSubstructMatches(Chem.MolFromSmarts('[S]'))
    carbonyl_group = mol.GetSubstructMatches(Chem.MolFromSmarts('[C]=O'))
    return len(sulfur_atom) + len(carbonyl_group)

def rule4_toxicity(mol):
    aromatic_system = mol.GetSubstructMatches(Chem.MolFromSmarts('c1ccccc1'))
    return len(aromatic_system)

def rule5_toxicity(mol):
    halogen_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts('[F,Cl,Br,I]'))
    return len(halogen_atoms)

def rule6_toxicity(mol):
    nitro_group = mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]'))

def rule7_bromine_presence(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("[Br]")))

def rule8_sulfonyl_presence(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("S(=O)(=O)")))

def rule9_conjugated_system(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("c:c")))

def rule10_chlorine_presence(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("[Cl]")))

def rule11_nitro_azide_presence(mol):
    nitro = len(mol.GetSubstructMatches(Chem.MolFromSmarts("[N+](=O)[O-]")))
    azide = len(mol.GetSubstructMatches(Chem.MolFromSmarts("[N-]=[N+]=[N-]")))
    return nitro + azide

def rule12_carbonyl_alkene_conjugation(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("C=O")))

def rule13_nitro_halogen_aromatic(mol):
    nitro = len(mol.GetSubstructMatches(Chem.MolFromSmarts("c[N+](=O)[O-]")))
    halogen = len(mol.GetSubstructMatches(Chem.MolFromSmarts("c[!#1]")))
    return nitro + halogen

def rule15_sulfonyl_group(mol):
    sulfonyl_pattern = Chem.MolFromSmarts('S(=O)(=O)')
    return len(mol.GetSubstructMatches(sulfonyl_pattern))

def rule1_chlorine_atom(mol):
    chlorine_pattern = Chem.MolFromSmarts('[Cl]')
    halogen_pattern = Chem.MolFromSmarts('[F,Br,I]')
    return len(mol.GetSubstructMatches(chlorine_pattern)) and not len(mol.GetSubstructMatches(halogen_pattern))

def rule2_sulfonyl_carbonyl_group(mol):
    sulfonyl_pattern = Chem.MolFromSmarts('S(=O)(=O)')
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(sulfonyl_pattern)) or len(mol.GetSubstructMatches(carbonyl_pattern))

def rule3_benzene_ring(mol):
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(benzene_pattern))

def rule4_sulfonyl_thiocarbonyl_group(mol):
    sulfonyl_pattern = Chem.MolFromSmarts('S(=O)(=O)')
    thiocarbonyl_pattern = Chem.MolFromSmarts('C=S')
    return len(mol.GetSubstructMatches(sulfonyl_pattern)) or len(mol.GetSubstructMatches(thiocarbonyl_pattern))

def rule5_carbonyl_double_bond(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    double_bond_pattern = Chem.MolFromSmarts('C=C')
    return len(mol.GetSubstructMatches(carbonyl_pattern)) or len(mol.GetSubstructMatches(double_bond_pattern))

def rule6_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule7_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule8_sulfonyl_nitro_group(mol):
    sulfonyl_pattern = Chem.MolFromSmarts('S(=O)(=O)')
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
