def rule1_molecule_size(mol):
    return mol.GetNumAtoms()

def rule2_electronegativity(mol):
    total_electronegativity = 0
    for atom in mol.GetAtoms():
        total_electronegativity += atom.GetAtomicNum()
    return total_electronegativity

def rule3_lone_pairs(mol):
    total_lone_pairs = 0
    for atom in mol.GetAtoms():
        total_lone_pairs += atom.GetNumRadicalElectrons()
    return total_lone_pairs

def rule4_molecule_shape(mol):
    return rdMolDescriptors.CalcNumRings(mol)

def rule6_double_triple_bonds(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]=[#6]'))) + len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]#[#6]')))

def rule8_polar_bonds(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#7,#8,#9,#16,#17,#35]~[#6]')))

def rule10_hydrogen_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#1]')))

def rule11_carbon_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]')))

def rule12_fluorine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#9]')))

def rule13_bromine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#35]')))

def rule14_iodine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#53]')))

def rule15_oxygen_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('O')))

def rule16_nitrogen_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('N')))

def rule17_sulfur_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('S')))

def rule18_phosphorus_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('P')))

def rule19_selenium_atoms(mol):
    selenium = Chem.MolFromSmiles('[Se]')
    return len(mol.GetSubstructMatches(selenium))


def rule20_tellurium_atoms(mol):
    if mol is not None:
        tellurium = Chem.MolFromSmiles('[Te]')
        if tellurium is not None:
            return len(mol.GetSubstructMatches(tellurium))
    return 0

