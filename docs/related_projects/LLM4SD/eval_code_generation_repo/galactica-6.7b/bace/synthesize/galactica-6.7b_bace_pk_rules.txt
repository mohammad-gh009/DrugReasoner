
def rule_fluorine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('F')))

def rule_bromine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('Br')))

def rule_iodine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('I')))

def rule_carbon_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('C')))

def rule_double_bonds(mol):
    aliphatic_double_bonds = 0
    for bond in mol.GetBonds():
        if bond.GetBondType() == Chem.rdchem.BondType.DOUBLE and bond.GetIsAromatic() == False:
            aliphatic_double_bonds += 1
    return aliphatic_double_bonds


def rule_triple_bonds(mol):
    return len([bond for bond in mol.GetBonds() if bond.GetBondType() == Chem.rdchem.BondType.TRIPLE])


def rule_ring_systems(mol):
    return rdMolDescriptors.CalcNumRings(mol)

def rule_chiral_centers(mol):
    return len(Chem.FindMolChiralCenters(mol, includeUnassigned=True))

def rule_functional_groups(mol):
    alcohol_smarts = '[OH]'
    pattern = Chem.MolFromSmarts(alcohol_smarts)
    return len(mol.GetSubstructMatches(pattern))


def rule_hydroxyl_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[OX2H]')))

def rule_amino_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[NX3;H2,H1;!$(NC=O)]')))

def rule_carboxylic_acid_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)[O;H1,H0]')))

def rule_carbonyl_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]=[O;X1]')))

def rule_ether_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[OD2]([#6])[#6]')))

def rule_sulfide_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#16X2H0]')))

def rule_sulfoxide_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#16X3H0](=[OX1])')))

def rule_sulfone_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#16X4H0](=[OX1])(=[OX1])')))

def rule_sulfonamide_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#16X4H0](=[OX1])(=[OX1])(N)')))
