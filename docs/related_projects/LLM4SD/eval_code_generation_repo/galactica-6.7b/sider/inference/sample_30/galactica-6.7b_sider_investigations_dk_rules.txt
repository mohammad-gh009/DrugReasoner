def rule1_adverse_effects(mol):
    nitro = Chem.MolFromSmarts('[N+](=O)[O-]')
    sulfonamide = Chem.MolFromSmarts('S(=O)(=O)N')
    carbonyl = Chem.MolFromSmarts('C=O')
    return mol.GetSubstructMatches(nitro) + mol.GetSubstructMatches(sulfonamide) + mol.GetSubstructMatches(carbonyl)

def rule2_adverse_effects(mol):
    benzene = Chem.MolFromSmarts('c1ccccc1')
    PAH = Chem.MolFromSmarts('c1cccc2c1CCCC2')
    return mol.GetSubstructMatches(benzene) + mol.GetSubstructMatches(PAH)



def rule4_adverse_effects(mol):
    return Descriptors.MolWt(mol), Descriptors.MolLogP(mol)

def rule5_adverse_effects(mol):
    halogen = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return mol.GetSubstructMatches(halogen)

def rule6_adverse_effects(mol):
    carboxylic_acid = Chem.MolFromSmarts('C(=O)O')
    tertiary_amine = Chem.MolFromSmarts('N(C)(C)C')
    return mol.GetSubstructMatches(carboxylic_acid) + mol.GetSubstructMatches(tertiary_amine)

def rule7_adverse_effects(mol):
    return rdMolDescriptors.CalcNumHBD(mol), rdMolDescriptors.CalcNumHBA(mol)

def rule8_lipophilicity(mol):
    return Descriptors.MolLogP(mol)

def rule1_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_chlorine_atom(mol):
    chlorine_pattern = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule3_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('[#6]=[O]')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule4_functional_groups(mol):
    functional_groups_pattern = Chem.MolFromSmarts('[CX3](=O)[#6]')
    return len(mol.GetSubstructMatches(functional_groups_pattern))

def rule5_metal_atoms(mol):
    metal_pattern = Chem.MolFromSmarts('[#79,#11,#27]')
    return len(mol.GetSubstructMatches(metal_pattern))

def rule6_nitrogen_groups(mol):
    nitrogen_pattern = Chem.MolFromSmarts('[NX3,NX4+][CX3](=[OX1])[#6]')
