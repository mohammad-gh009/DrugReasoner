def rule1_nitro_group(mol):
    nitro_group = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_group))

def rule2_chlorine_atom(mol):
    chlorine_atom = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(chlorine_atom))

def rule3_carbonyl_group(mol):
    carbonyl_group = Chem.MolFromSmarts('[#6]=[O]')
    return len(mol.GetSubstructMatches(carbonyl_group))

def rule4_benzene_ring(mol):
    benzene_ring = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(benzene_ring))

def rule5_halogen_atom(mol):
    halogen_atom = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_atom))

def rule6_adverse_effect_group(mol):
    nitro_group = Chem.MolFromSmarts('[N+](=O)[O-]')
    sulfonamide_group = Chem.MolFromSmarts('S(=O)(=O)N')
    halogen_group = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(nitro_group)) + len(mol.GetSubstructMatches(sulfonamide_group)) + len(mol.GetSubstructMatches(halogen_group))

def rule7_polar_or_ring(mol):
    polar_group = Chem.MolFromSmarts('[#7,#8,F,Cl,Br,I]')
    ring_structure = mol.GetRingInfo().NumRings()
    return len(mol.GetSubstructMatches(polar_group)) + ring_structure

def rule8_molecular_weight(mol):
    return rdMolDescriptors.CalcExactMolWt(mol)

def rule8_complex_structure(mol):
    return mol.GetNumHeavyAtoms()

def rule9_polarity(mol):
    return rdMolDescriptors.CalcTPSA(mol)

def rule9_lipophilicity(mol):
    return Descriptors.MolLogP(mol)

def rule1_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule3_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule4_chlorine_atom(mol):
    chlorine_pattern = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule5_benzene_ring(mol):
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(benzene_pattern))

def rule6_functional_groups(mol):
    aldehyde_pattern = Chem.MolFromSmarts('C=O')
    ketone_pattern = Chem.MolFromSmarts('C(=O)C')
    amide_pattern = Chem.MolFromSmarts('C(=O)N')
    carboxylic_acid_pattern = Chem.MolFromSmarts('C(=O)O')

def rule7_aromatic_rings(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule8_nitro_sulfonamide_groups(mol):
    nitro_group = Chem.MolFromSmarts('[N+](=O)[O-]')
    sulfonamide_group = Chem.MolFromSmarts('S(=O)(=O)N')
    return mol.GetSubstructMatches(nitro_group) + mol.GetSubstructMatches(sulfonamide_group)

def rule9_molecular_weight(mol):
    return Descriptors.MolWt(mol)

def rule10_sulfonamide_group(mol):
    sulfonamide_group = Chem.MolFromSmarts('S(=O)(=O)N')
    return mol.GetSubstructMatches(sulfonamide_group)

def rule11_halogen_group(mol):
    halogen_group = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return mol.GetSubstructMatches(halogen_group)

def rule12_nitro_group(mol):
    nitro_group = Chem.MolFromSmarts('[N+](=O)[O-]')
    return mol.GetSubstructMatches(nitro_group)

def rule13_halogen_atom(mol):
    halogen_atom = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return mol.GetSubstructMatches(halogen_atom)

def rule14_carbonyl_group(mol):
    carbonyl_group = Chem.MolFromSmarts('C=O')
