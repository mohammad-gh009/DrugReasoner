def rule1_contains_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_contains_chlorine_atom(mol):
    chlorine_pattern = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule3_contains_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule4_contains_nitro_and_chlorine(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    chlorine_pattern = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(nitro_pattern)) and len(mol.GetSubstructMatches(chlorine_pattern))

def rule5_contains_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule6_contains_amidine_or_guanidine(mol):
    amidine_pattern = Chem.MolFromSmarts('C(=N)N')
    guanidine_pattern = Chem.MolFromSmarts('C(=N)(N)N')
    return len(mol.GetSubstructMatches(amidine_pattern)) or len(mol.GetSubstructMatches(guanidine_pattern))

def rule7_contains_halogenated_aromatic_ring(mol):
    halogenated_aromatic_pattern = Chem.MolFromSmarts('c1ccccc1[F,Cl,Br]')
    return len(mol.GetSubstructMatches(halogenated_aromatic_pattern))

def rule8_sulfonamide_group(mol):
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    return len(mol.GetSubstructMatches(sulfonamide_pattern))

def rule9_amino_group(mol):
    amino_pattern = Chem.MolFromSmarts('N')
    return len(mol.GetSubstructMatches(amino_pattern))

def rule10_chlorine_atom(mol):
    chlorine_pattern = Chem.MolFromSmarts('Cl')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule11_benzene_ring(mol):
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(benzene_pattern))

def rule12_chlorine_benzene(mol):
    chlorine_pattern = Chem.MolFromSmarts('Cl')
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(chlorine_pattern)) + len(mol.GetSubstructMatches(benzene_pattern))

def rule14_nitro_carbonyl_halogen(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(nitro_pattern)) + len(mol.GetSubstructMatches(carbonyl_pattern)) + len(mol.GetSubstructMatches(halogen_pattern))

def rule16_metal_ion(mol):
    metals = ['Li', 'Be', 'Na', 'Mg', 'Al', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']
    return sum(atom.GetSymbol() in metals for atom in mol.GetAtoms())

def rule17_ring_structure(mol):
    return rdMolDescriptors.CalcNumRings(mol)

def rule1_carbonyl_group(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'C' and any(neighbor.GetSymbol() == 'O' for neighbor in atom.GetNeighbors()))

def rule2_nitrogen_atom(mol):
    return sum(atom.GetSymbol() == 'N' for atom in mol.GetAtoms())

def rule3_halogen_atom(mol):
    halogens = ['F', 'Cl', 'Br', 'I', 'At']
    return sum(atom.GetSymbol() in halogens for atom in mol.GetAtoms())

def rule4_nitro_group(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N' and len([neighbor.GetSymbol() == 'O' for neighbor in atom.GetNeighbors()]) == 2)

def rule5_sulfonamide_group(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'S' and any(neighbor.GetSymbol() == 'N' for neighbor in atom.GetNeighbors()))

def rule7_sulfonamide_nitro(mol):
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    nitro_pattern = Chem.MolFromSmarts('N(=O)=O')
    return mol.GetSubstructMatches(sulfonamide_pattern) and mol.GetSubstructMatches(nitro_pattern)

def rule8_polar_functional_group(mol):
    amino_pattern = Chem.MolFromSmarts('N')
    hydroxyl_pattern = Chem.MolFromSmarts('O')
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return mol.GetSubstructMatches(amino_pattern) or mol.GetSubstructMatches(hydroxyl_pattern) or mol.GetSubstructMatches(carbonyl_pattern)

def rule9_pah_halogenated_aromatic(mol):
    pah_pattern = Chem.MolFromSmarts('c1ccccc1-c2ccccc2')
    halogenated_aromatic_pattern = Chem.MolFromSmarts('c1ccccc1[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(pah_pattern)) + len(mol.GetSubstructMatches(halogenated_aromatic_pattern))


def rule10_alcohol_amine(mol):
    alcohol_pattern = Chem.MolFromSmarts('O')
    amine_pattern = Chem.MolFromSmarts('N')
    return mol.GetSubstructMatches(alcohol_pattern) or mol.GetSubstructMatches(amine_pattern)

def rule11_cyclic_structure(mol):
    return rdMolDescriptors.CalcNumRings(mol)

def rule12_alcohol_aldehyde_carboxylic_acid(mol):
    alcohol_pattern = Chem.MolFromSmarts('O')
    aldehyde_pattern = Chem.MolFromSmarts('C=O')
    carboxylic_acid_pattern = Chem.MolFromSmarts('C(=O)O')
    return mol.GetSubstructMatches(alcohol_pattern) or mol.GetSubstructMatches(aldehyde_pattern) or mol.GetSubstructMatches(carboxylic_acid_pattern)

def rule13_high_mw_polarity(mol):
    return rdMolDescriptors.CalcExactMolWt(mol), Descriptors.TPSA(mol)

def rule14_heavy_metals(mol):
    heavy_metal_pattern = Chem.MolFromSmarts('[Pb,Hg,Cd]')
