def rule1_sulfonamide_group(mol):
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    return len(mol.GetSubstructMatches(sulfonamide_pattern))

def rule2_quinolone_group(mol):
    quinolone_pattern = Chem.MolFromSmarts('c1cnc2c(c1)C(=O)C=CN2')
    return len(mol.GetSubstructMatches(quinolone_pattern))

def rule3_benzimidazole_group(mol):
    benzimidazole_pattern = Chem.MolFromSmarts('n1c2ccccc2[nH]c1')
    return len(mol.GetSubstructMatches(benzimidazole_pattern))

def rule4_phosphate_group(mol):
    phosphate_pattern = Chem.MolFromSmarts('P(=O)(O)O')
    return len(mol.GetSubstructMatches(phosphate_pattern))

def rule5_chlorine_atom(mol):
    chlorine_pattern = Chem.MolFromSmarts('Cl')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule6_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule7_benzene_ring(mol):
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(benzene_pattern))

def rule8_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule9_halogen_atoms(mol):
    halogens = ['Cl', 'Br', 'I']
    atoms = mol.GetAtoms()
    count = 0
    for atom in atoms:
        if atom.GetSymbol() in halogens:
            count += 1
    return count

def rule11_arsenic_phosphorus_atoms(mol):
    atoms = ['As', 'P']
    atoms = mol.GetAtoms()
    count = 0
    for atom in atoms:
        if atom.GetSymbol() in atoms:
            count += 1
    return count

def rule12_carboxylic_acid_nitro_chlorine(mol):
    carboxylic_acid_pattern = Chem.MolFromSmarts('C(=O)[O;h1]')
    nitro_pattern = Chem.MolFromSmarts('N(=O)[O;h1]')
    chlorine_pattern = Chem.MolFromSmarts('Cl')
    return len(mol.GetSubstructMatches(carboxylic_acid_pattern)) + len(mol.GetSubstructMatches(nitro_pattern)) + len(mol.GetSubstructMatches(chlorine_pattern))

def rule13_adverse_effects(mol):
    amide_pattern = Chem.MolFromSmarts('C(=O)N')
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    chlorine_pattern = Chem.MolFromSmarts('Cl')
    fluorine_pattern = Chem.MolFromSmarts('F')
    nitro_pattern = Chem.MolFromSmarts('N(=O)[O;h1]')
    cyano_pattern = Chem.MolFromSmarts('C#N')
    return len(mol.GetSubstructMatches(amide_pattern)) + len(mol.GetSubstructMatches(sulfonamide_pattern)) + len(mol.GetSubstructMatches(chlorine_pattern)) + len(mol.GetSubstructMatches(fluorine_pattern)) + len(mol.GetSubstructMatches(nitro_pattern)) + len(mol.GetSubstructMatches(cyano_pattern))

def rule14_molecular_weight(mol):
    return Descriptors.MolWt(mol)

def rule15_specific_functional_groups(mol):
    nitro_pattern = Chem.MolFromSmarts('N(=O)[O;h1]')
    halogen_pattern = Chem.MolFromSmarts('[Cl,Br,I]')
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(nitro_pattern)) + len(mol.GetSubstructMatches(halogen_pattern)) + len(mol.GetSubstructMatches(carbonyl_pattern))

def rule16_sulfur_bonds(mol):
    sulfur_pattern = Chem.MolFromSmarts('[#16]')

def rule17_nitro_group(mol):
    nitro_group = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_group))

def rule17_chlorine_atom(mol):
    chlorine_atom = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(chlorine_atom))

def rule17_carbonyl_group(mol):
    carbonyl_group = Chem.MolFromSmarts('[#6]=[O]')
    return len(mol.GetSubstructMatches(carbonyl_group))

def rule17_halogen_atom(mol):
    halogen_atom = Chem.MolFromSmarts('[#9,#17,#35,#53]')
    return len(mol.GetSubstructMatches(halogen_atom))

def rule17_polar_functional_group(mol):
    alcohol = Chem.MolFromSmarts('O')
    amine = Chem.MolFromSmarts('N')
    carboxylic_acid = Chem.MolFromSmarts('C(=O)O')
    return len(mol.GetSubstructMatches(alcohol)) + len(mol.GetSubstructMatches(amine)) + len(mol.GetSubstructMatches(carboxylic_acid))

def rule8_halogen_presence(mol):
    halogens = ['F', 'Cl', 'Br', 'I']
    atoms = mol.GetAtoms()
    count = sum(1 for atom in atoms if atom.GetSymbol() in halogens)
    return count

def rule9_carbonyl_presence(mol):
    patt = Chem.MolFromSmarts('[#6]=[#8]')
    matches = mol.GetSubstructMatches(patt)
    return len(matches)

def rule10_nitro_presence(mol):
    patt = Chem.MolFromSmarts('[N+](=O)[O-]')
    matches = mol.GetSubstructMatches(patt)
    return len(matches)

def rule11_halogen_presence(mol):
    halogens = ['Cl', 'Br', 'I']
    atoms = mol.GetAtoms()
    count = sum(1 for atom in atoms if atom.GetSymbol() in halogens)
    return count

def rule12_amide_presence(mol):
    patt = Chem.MolFromSmarts('[#6](=[#8])[#7]')
    matches = mol.GetSubstructMatches(patt)
    return len(matches)

def rule13_carboxylic_acid_presence(mol):
    patt = Chem.MolFromSmarts('[#6](=[#8])-[#8]')
    matches = mol.GetSubstructMatches(patt)
    return len(matches)

def rule14_nitro_presence(mol):
    return rule10_nitro_presence(mol)

def rule15_carbonyl_presence(mol):
    return rule9_carbonyl_presence(mol)
