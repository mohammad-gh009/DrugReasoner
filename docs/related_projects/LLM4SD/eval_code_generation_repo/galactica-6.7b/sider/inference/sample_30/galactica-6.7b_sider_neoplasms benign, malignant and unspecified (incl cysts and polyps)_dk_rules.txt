def rule1_contains_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_contains_chlorine_atom(mol):
    chlorine_pattern = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule3_contains_sulfur_atom(mol):
    sulfur_pattern = Chem.MolFromSmarts('[S]')
    return len(mol.GetSubstructMatches(sulfur_pattern))

def rule4_contains_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule5_contains_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule6_contains_benzene_ring(mol):
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(benzene_pattern))

def rule7_contains_functional_group(mol):
    functional_group_pattern = Chem.MolFromSmarts('CN(CC(=O)O)CC(=O)[O-]')

def rule8_adverse_effects(mol):
    smarts = '[#6](-[#6](-[#7](-[#6](-[#6](-[#7](-[#6](-[#8])-[#8]-)=[#8])-[#8]-)=[#8])-[#7](-[#6](-[#6](-[#7](-[#6](-[#8])-[#8]-)=[#8])-[#8]-)=[#8])-[#8]-'
    pattern = Chem.MolFromSmarts(smarts)
    if pattern is not None:
        return len(mol.GetSubstructMatches(pattern))
    else:
        return 0


def rule9_adverse_effects(mol):
    smarts = '[#6]-[#6@@H](-[#6@@H](-[#8]-[#6])-[#7](-[#6](-[#8])-[#6]1-[#16]-[#16]-[#6]-[#6](-[#6](-[#8])-[#7](-[#6](-[#8])-[#7](-[#6](-[#8])-[#7](-[#6](-[#8])-[#7]1)-[#6](-[#6])-[#8])-CCCCN)-[#6](-[#6]2=[#7]-[#6]-[#6]3=[#6]-[#6]-[#6]-[#6]-[#6]-32)-[#6](-[#6]4=[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-4)-[#7](-[#6](-[#8])-[#6](-[#6]5=[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-5)-[#7])-[#8].[#6](-[#8])-[#8].[#6](-[#8])-[#8]'
    pattern = Chem.MolFromSmarts(smarts)
    if pattern is None:
        return 0
    return len(mol.GetSubstructMatches(pattern))


def rule10_neoplasms_effects(mol):
    smarts = '[#6](=[#8])-[#8]'
    pattern = Chem.MolFromSmarts(smarts)
    return len(mol.GetSubstructMatches(pattern))

def rule11_neoplasms_effects(mol):
    smarts = '[#6](=[#8])-[#17]'
    pattern = Chem.MolFromSmarts(smarts)
    return len(mol.GetSubstructMatches(pattern))

def rule12_adverse_effects(mol):
    smarts = 'c1ccccc1'
    pattern = Chem.MolFromSmarts(smarts)
    return len(mol.GetSubstructMatches(pattern))

def rule13_adverse_effects(mol):
    smarts = '[#7]'
    pattern = Chem.MolFromSmarts(smarts)
    return len(mol.GetSubstructMatches(pattern))

def rule14_neoplasms_effects(mol):
    smarts = '[#6](=[#8])-[#7](-[#8])=[#8]'
    pattern = Chem.MolFromSmarts(smarts)

def rule15_halogen_carbonyl(mol):
    halogens = ['Cl', 'Br', 'I']
    carbonyl = '[#6]=[#8]'
    halogen_count = sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() in halogens)
    carbonyl_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts(carbonyl)))
    return halogen_count + carbonyl_count

def rule1_halogen(mol):
    halogens = ['Cl', 'Br', 'I']
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() in halogens)

def rule2_nitro(mol):
    nitro = '[N+](=O)[O-]'
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts(nitro)))

def rule3_carbonyl(mol):
    carbonyl = '[#6]=[#8]'
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts(carbonyl)))

def rule4_benzene(mol):
    benzene = 'c1ccccc1'
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts(benzene)))

def rule5_nitro_neoplasms(mol):
    nitro = '[N+](=O)[O-]'
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts(nitro)))

def rule6_carbonyl_neoplasms(mol):
    carbonyl = '[#6]=[#8]'
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts(carbonyl)))

def rule7_halogen_neoplasms(mol):
    halogens = ['Cl', 'Br', 'I']
