def rule1_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule3_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('[#6]=[O]')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule4_chlorine_atom(mol):
    chlorine_pattern = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule5_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule6_sulfur_atom(mol):
    sulfur_pattern = Chem.MolFromSmarts('[S]')
    return len(mol.GetSubstructMatches(sulfur_pattern))

def rule7_benzene_ring(mol):
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(benzene_pattern))

def rule8_hydroxyl_group(mol):
    hydroxyl_pattern = Chem.MolFromSmarts('[OH]')
    return len(mol.GetSubstructMatches(hydroxyl_pattern))

def rule9_carboxylic_acid_group(mol):
    carboxylic_acid_pattern = Chem.MolFromSmarts('C(=O)O')
    return len(mol.GetSubstructMatches(carboxylic_acid_pattern))

def rule10_halogenated_aromatic_ring(mol):
    halogenated_aromatic_pattern = Chem.MolFromSmarts('c1ccccc1[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogenated_aromatic_pattern))

def rule11_adverse_effects(mol):
    nitro_group = mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]'))
    carboxylic_acid_group = mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)O'))
    if nitro_group and carboxylic_acid_group:
        return 1
    else:
        return 0

def rule1_nitro_group(mol):
    nitro_group = mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]'))
    if nitro_group:
        return 1
    else:
        return 0

def rule2_hydroxyl_group(mol):
    hydroxyl_group = mol.GetSubstructMatches(Chem.MolFromSmarts('O'))
    if hydroxyl_group:
        return 1
    else:
        return 0

def rule3_chlorine_atom(mol):
    chlorine_atom = mol.GetSubstructMatches(Chem.MolFromSmarts('Cl'))
    if chlorine_atom:
        return 1
    else:
        return 0

def rule4_halogenated_aromatic_ring(mol):
    halogenated_aromatic_ring = mol.GetSubstructMatches(Chem.MolFromSmarts('c1ccccc1[X]'))
    if halogenated_aromatic_ring:
        return 1
    else:
        return 0


def rule5_carboxylic_acid_group(mol):
    carboxylic_acid_group = mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)O'))
    if carboxylic_acid_group:
        return 1
    else:
        return 0

def rule6_benzene_ring(mol):
    benzene_smiles = 'c1ccccc1'
    benzene = Chem.MolFromSmiles(benzene_smiles)
    return mol.GetSubstructMatches(benzene)

def rule7_amidine_group(mol):
    amidine_smiles = 'NC(N)=N'
    amidine = Chem.MolFromSmiles(amidine_smiles)
    return mol.GetSubstructMatches(amidine)

def rule8_sulfonamide_group(mol):
    sulfonamide_smiles = 'NS(=O)(=O)C'
    sulfonamide = Chem.MolFromSmiles(sulfonamide_smiles)
    return mol.GetSubstructMatches(sulfonamide)

def rule9_piperazine_group(mol):
    piperazine_smiles = 'N1CCNCC1'
    piperazine = Chem.MolFromSmiles(piperazine_smiles)
    return mol.GetSubstructMatches(piperazine)

def rule10_carbonyl_group(mol):
    carbonyl_smarts = '[#6]=[#8]'
    carbonyl = Chem.MolFromSmarts(carbonyl_smarts)
    return mol.GetSubstructMatches(carbonyl)
