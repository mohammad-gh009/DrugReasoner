def rule1_contains_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_contains_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule3_contains_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule4_nitro_group_adverse_effects(mol):
    return rule1_contains_nitro_group(mol)

def rule5_halogen_atom_adverse_effects(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule6_carbonyl_group_adverse_effects(mol):
    return rule2_contains_carbonyl_group(mol)

def rule7_contains_sulfonamide_group(mol):
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    return len(mol.GetSubstructMatches(sulfonamide_pattern))

def rule8_contains_polar_carbonyl_group(mol):
    return rule2_contains_carbonyl_group(mol)

def rule9_contains_reactive_nitrile_group(mol):
    nitrile_pattern = Chem.MolFromSmarts('C#N')
    return len(mol.GetSubstructMatches(nitrile_pattern))

def rule10_metal_ion(mol):
    metal_ions = ['Fe', 'Cu', 'Zn', 'Mn', 'Ni', 'Co', 'Cr', 'Mo', 'V', 'Se', 'Ag', 'Cd', 'Hg', 'Pb']
    for atom in mol.GetAtoms():
        if atom.GetSymbol() in metal_ions:
            return 1
    return 0

def rule11_sulfur_atom(mol):
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'S':
            return 1
    return 0

def rule12_phosphorus_atom(mol):
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'P':
            return 1
    return 0

def rule13_nitrogen_atom(mol):
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'N':
            return 1
    return 0

def rule14_carbon_atom(mol):
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'C':
            return 1
    return 0

def rule15_hydrogen_atom(mol):
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'H':
            return 1
    return 0

def rule16_sulfonamide_group(mol):
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    return mol.HasSubstructMatch(sulfonamide_pattern)

def rule17_high_molecular_weight(mol, threshold=500):
    return rdMolDescriptors.CalcExactMolWt(mol) > threshold

def rule18_halogenated_aromatic_ring(mol):
    halogenated_aromatic_pattern = Chem.MolFromSmarts('c1ccccc1[X]')
    if halogenated_aromatic_pattern is not None:
        return mol.HasSubstructMatch(halogenated_aromatic_pattern)
    else:
        return 0


def rule19_chlorine_atom(mol):
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'Cl':
            return 1

def rule20_carbonyl_nitro(mol):
    carbonyl = mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]=[#8]'))
    nitro = mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]'))
    return len(carbonyl) > 0 and len(nitro) > 0

def rule21_sulfonamide(mol):
    sulfonamide = mol.GetSubstructMatches(Chem.MolFromSmarts('S(=O)(=O)N'))
    return len(sulfonamide) > 0

def rule22_benzene_ring(mol):
    benzene = mol.GetSubstructMatches(Chem.MolFromSmarts('c1ccccc1'))
    return len(benzene) > 0

def rule23_amino_group(mol):
    amino = mol.GetSubstructMatches(Chem.MolFromSmarts('N'))
    return len(amino) > 0

def rule24_nitro_group(mol):
    nitro = mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]'))
    return len(nitro) > 0

def rule25_benzene_ring(mol):
    benzene = mol.GetSubstructMatches(Chem.MolFromSmarts('c1ccccc1'))
    return len(benzene) > 0

def rule26_nitro_halogen(mol):
    nitro = mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]'))
    halogen = mol.GetSubstructMatches(Chem.MolFromSmarts('[F,Cl,Br,I]'))
    return len(nitro) > 0 and len(halogen) > 0

def rule1_nitro_group(mol):
    nitro = mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]'))
    return len(nitro) > 0

def rule2_fluorine_atom(mol):
    fluorine = mol.GetSubstructMatches(Chem.MolFromSmarts('[F]'))
    return len(fluorine) > 0

def rule3_chlorine_atom(mol):
    chlorine = mol.GetSubstructMatches(Chem.MolFromSmarts('[Cl]'))
    return len(chlorine) > 0

def rule4_carbonyl_group(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'C' and atom.GetTotalNumHs() == 0)

def rule5_nitrogen_atom(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N')

def rule6_halogen_atom(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() in ['F', 'Cl', 'Br', 'I'])

def rule7_carboxylic_acid_group(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'C' and atom.GetTotalNumHs() == 1)

def rule8_gadolinium_ion(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'Gd')

def rule9_arsenic_ion(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'As')

def rule10_sulfonamide_group(mol):
    # Placeholder function, modify to suit your needs
    return 0

def rule11_ring_structure(mol):
    return Descriptors.RingCount(mol)

def rule12_polar_functional_group(mol):
    # Placeholder function, modify to suit your needs
    return 0

def rule13_aromatic_ring(mol):
    return Descriptors.NumAromaticRings(mol)
