def rule1_carboxylic_acid(mol):
    pattern = Chem.MolFromSmarts('C(=O)O')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule2_disulfide_bond(mol):
    pattern = Chem.MolFromSmarts('S-S')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule3_tertiary_amine(mol):
    pattern = Chem.MolFromSmarts('N(C)(C)C')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule4_nitro_group(mol):
    pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule5_chlorine_atom(mol):
    pattern = Chem.MolFromSmarts('Cl')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule6_carbonyl_group(mol):
    pattern = Chem.MolFromSmarts('C=O')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule7_sulfur_atom(mol):
    pattern = Chem.MolFromSmarts('S')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule8_aromatic_ring(mol):
    return Descriptors.NumAromaticRings(mol)

def rule9_polar_functional_group(mol):
    polar_functional_groups = ['OH', 'NH2', 'COOH', 'SO3H', 'PO3H2', 'OPO3H2', 'OPO3H', 'OP(O)O2', 'COO', 'SO3', 'PO3', 'OPO3', 'OP(O)O', 'NO2', 'CN', 'CONH2', 'CO', 'SO2NH2', 'SO2', 'PO2', 'OPO2', 'OP(O)', 'CS', 'C=S', 'C=O', 'C=N', 'N=O', 'P=O', 'S=O']
    for group in polar_functional_groups:
        if group in Chem.MolToSmiles(mol):
            return 1
    return 0

def rule10_high_molecular_weight(mol):
    return Descriptors.MolWt(mol)

def rule11_halogen_atom(mol):
    halogens = ['F', 'Cl', 'Br', 'I']
    for atom in mol.GetAtoms():
        if atom.GetSymbol() in halogens:
            return 1
    return 0

def rule12_sulfonamide_group(mol):
    sulfonamide = Chem.MolFromSmarts('S(=O)(=O)N')
    return len(mol.GetSubstructMatches(sulfonamide))

def rule13_piperazine_group(mol):
    piperazine = Chem.MolFromSmarts('C1CNCCN1')
    return len(mol.GetSubstructMatches(piperazine))

def rule14_quinolone_group(mol):
    quinolone = Chem.MolFromSmarts('c1cc2c(cc1)C(=O)C=CN2')
    return len(mol.GetSubstructMatches(quinolone))

def rule15_chloromethyl_group(mol):
    chloromethyl = Chem.MolFromSmarts('CCl')
    return len(mol.GetSubstructMatches(chloromethyl))

def rule16_halogenated_aromatic_ring(mol):
    halogenated_aromatic = Chem.MolFromSmarts('c1ccccc1X')

def rule1_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_chlorine_atom(mol):
    chlorine_pattern = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule3_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('[#6]=[O]')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule4_carboxylic_acid_group(mol):
    carboxylic_acid_pattern = Chem.MolFromSmarts('C(=O)O')
    return len(mol.GetSubstructMatches(carboxylic_acid_pattern))

def rule5_sulfur_atom(mol):
    sulfur_pattern = Chem.MolFromSmarts('[S]')
    return len(mol.GetSubstructMatches(sulfur_pattern))

def rule6_nitrogen_atom(mol):
    nitrogen_pattern = Chem.MolFromSmarts('[N]')
    return len(mol.GetSubstructMatches(nitrogen_pattern))

def rule7_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule8_benzene_ring(mol):
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(benzene_pattern))

def rule9_fluorine_atom(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('F')))

def rule10_adverse_effects(mol):
    sulfonamide = Chem.MolFromSmarts('S(=O)(=O)N')
    piperazine = Chem.MolFromSmarts('N1CCNCC1')
    return len(mol.GetSubstructMatches(sulfonamide)) + len(mol.GetSubstructMatches(piperazine))

def rule11_cardiovascular_effects(mol):
    quinolone = Chem.MolFromSmarts('c1c2c(ccc1)oc3c2ccnc3')
    return len(mol.GetSubstructMatches(quinolone))

def rule12_halogenated_aromatic(mol):
    halogenated_aromatic = Chem.MolFromSmarts('[cH0:1]1[cH0:2][cH0:3][cH0:4][cH0:5][cH0:6]1X')
    if halogenated_aromatic is not None:
        return len(mol.GetSubstructMatches(halogenated_aromatic))
    else:
        return 0


def rule13_ionizable_group(mol):
    ionizable = Chem.MolFromSmarts('[!#1!#6!#9!#17!#35!#53]')
    return len(mol.GetSubstructMatches(ionizable))

def rule14_halogen_atom(mol):
    halogen = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen))

def rule15_PAH_structure(mol):
    PAH = Chem.MolFromSmarts('c1cccc2c1cccc2')
    return len(mol.GetSubstructMatches(PAH))

def rule16_halogenated_aromatic_structure(mol):
    halogenated_aromatic_structure = Chem.MolFromSmarts('c1ccccc1X')
