def rule1_benzene_ring(mol):
    aromatic_atoms = [atom.GetIsAromatic() for atom in mol.GetAtoms()]
    return aromatic_atoms.count(True)

def rule2_chlorine_atom(mol):
    chlorine_atoms = [atom.GetSymbol() for atom in mol.GetAtoms()]
    return chlorine_atoms.count('Cl')

def rule3_nitro_group(mol):
    nitro_group = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_group))

def rule4_carboxylic_acid_group(mol):
    carboxylic_acid_group = Chem.MolFromSmarts('C(=O)O')
    return len(mol.GetSubstructMatches(carboxylic_acid_group))

def rule5_halogenated_aromatic_ring(mol):
    halogenated_aromatic_ring = Chem.MolFromSmarts('c1ccccc1[#9,#17,#35,#53]')
    return len(mol.GetSubstructMatches(halogenated_aromatic_ring))


def rule6_nitrogen_heterocycle(mol):
    nitrogen_heterocycle = Chem.MolFromSmarts('n1cccc1')
    return len(mol.GetSubstructMatches(nitrogen_heterocycle))

def rule7_halogen_atom(mol):
    halogen_atoms = [atom.GetSymbol() for atom in mol.GetAtoms()]
    return halogen_atoms.count('Cl') + halogen_atoms.count('Br') + halogen_atoms.count('I')

def rule8_sulfonamide_group(mol):
    sulfonamide_group = Chem.MolFromSmarts('S(=O)(=O)N')
    return len(mol.GetSubstructMatches(sulfonamide_group))

def rule9_chloride(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[Cl]')))

def rule10_nitro_group(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]')))

def rule11_carbonyl_group(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]=[O]')))

def rule12_nitrogen_atom(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[N]')))

def rule13_phosphorus_atom(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[P]')))

def rule14_carboxylic_acid_and_nitrogen_heterocycle(mol):
    carboxylic_acid = len(mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)O')))
    nitrogen_heterocycle = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[n]')))
    return carboxylic_acid and nitrogen_heterocycle

def rule15_carbonyl_and_sulfur(mol):
    carbonyl_group = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]=[O]')))
    sulfur_atom = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[S]')))
    return carbonyl_group and sulfur_atom

def rule17_carboxylic_nitro(mol):
    carboxylic_acid = mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)O'))
    nitro_group = mol.GetSubstructMatches(Chem.MolFromSmarts('N(=O)=O'))
    return len(carboxylic_acid) > 0 and len(nitro_group) > 0

def rule18_sulfoxide(mol):
    sulfoxide_group = mol.GetSubstructMatches(Chem.MolFromSmarts('S(=O)'))
    return len(sulfoxide_group) > 0

def rule1_carboxylic(mol):
    carboxylic_acid = mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)O'))
    return len(carboxylic_acid) > 0

def rule2_chloride(mol):
    chloride_group = mol.GetSubstructMatches(Chem.MolFromSmarts('Cl'))
    return len(chloride_group) > 0

def rule3_nitro(mol):
    nitro_group = mol.GetSubstructMatches(Chem.MolFromSmarts('N(=O)=O'))
    return len(nitro_group) > 0

def rule4_halogenated_aromatic(mol):
    try:
        halogenated_aromatic = mol.GetSubstructMatches(Chem.MolFromSmarts('c1ccccc1Cl'))
        return len(halogenated_aromatic) > 0
    except:
        return 0


def rule5_halogen(mol):
    halogen_group = mol.GetSubstructMatches(Chem.MolFromSmarts('Cl'))
    return len(halogen_group) > 0

def rule6_sulfonamide(mol):
    sulfonamide_group = mol.GetSubstructMatches(Chem.MolFromSmarts('S(=O)(=O)N'))

def rule7_tertiary_amine(mol):
    tertiary_amine = Chem.MolFromSmarts('[NX3;H0](C)(C)C')
    return len(mol.GetSubstructMatches(tertiary_amine))

def rule8_nitro_group(mol):
    nitro_group = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_group))

def rule9_carbonyl_group(mol):
    carbonyl_group = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(carbonyl_group))

def rule10_gadolinium_ion(mol):
    gadolinium_ion = Chem.MolFromSmarts('[Gd+3]')
    return len(mol.GetSubstructMatches(gadolinium_ion))

def rule11_carbonyl_nitro_group(mol):
    carbonyl_group = Chem.MolFromSmarts('C=O')
    nitro_group = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(carbonyl_group)) + len(mol.GetSubstructMatches(nitro_group))

def rule12_pah_structure(mol):
    pah_structure = Chem.MolFromSmarts('c1ccccc1-c2ccccc2')
    return len(mol.GetSubstructMatches(pah_structure))

def rule13_chlorine_atom(mol):
    chlorine_atom = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(chlorine_atom))

def rule14_sulfur_atom(mol):
    sulfur_atom = Chem.MolFromSmarts('[S]')
