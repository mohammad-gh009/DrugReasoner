def rule1_contains_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_contains_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule3_contains_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule4_contains_sulfonamide_group(mol):
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    return len(mol.GetSubstructMatches(sulfonamide_pattern))

def rule5_contains_carboxylic_acid_group(mol):
    carboxylic_acid_pattern = Chem.MolFromSmarts('C(=O)O')
    return len(mol.GetSubstructMatches(carboxylic_acid_pattern))

def rule6_contains_ionizable_or_radioactive_group(mol):
    ionizable_pattern = Chem.MolFromSmarts('[NH+](=O)[O-].[Na+]')
    radioactive_pattern = Chem.MolFromSmarts('[O-][99Tc](=O)(=O)=O.[Na+]')
    return len(mol.GetSubstructMatches(ionizable_pattern)) + len(mol.GetSubstructMatches(radioactive_pattern))

def rule7_contains_specific_functional_group(mol):
    functional_groups = ['C1CCC2O)CCC4=CC(=O)CCC34C', 'CC1=CC=C(C=C1)C(=O)C2=CC=C(N2C)CC(=O)[O-]', 'CC1(OC2CC3C4CCC5=CC(=O)CCC5(C4(C(CC3(C2(O1)C(=O)CCl)C)O)F)C)C', 'CC1=C(C=C(C=C1)N2C(=O)C(=C(N2)C)N/N=C/3\C=CC=C(C3=O)C4=CC(=CC=C4)C(=O)O)C', 'C1(=C(N=C(C(=N1)Cl)N)N)C(=O)N=C(N)N.Cl']
    count = 0
    for group in functional_groups:
        group_pattern = Chem.MolFromSmiles(group)
        if group_pattern is not None:
            count += len(mol.GetSubstructMatches(group_pattern))
    return count


def rule8_contains_chlorine_atom(mol):
    chlorine_pattern = Chem.MolFromSmarts('Cl')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule9_benzene_ring(mol):
    benzene_smiles = 'c1ccccc1'
    benzene = Chem.MolFromSmiles(benzene_smiles)
    return len(mol.GetSubstructMatches(benzene))

def rule1_nitro_group(mol):
    nitro_smarts = '[N+](=O)[O-]'
    nitro = Chem.MolFromSmarts(nitro_smarts)
    return len(mol.GetSubstructMatches(nitro))

def rule2_halogen_atom(mol):
    halogen_smarts = '[F,Cl,Br,I]'
    halogen = Chem.MolFromSmarts(halogen_smarts)
    return len(mol.GetSubstructMatches(halogen))

def rule3_carbonyl_group(mol):
    carbonyl_smarts = 'C=O'
    carbonyl = Chem.MolFromSmarts(carbonyl_smarts)
    return len(mol.GetSubstructMatches(carbonyl))

def rule4_sulfur_atom(mol):
    sulfur_smarts = '[S]'
    sulfur = Chem.MolFromSmarts(sulfur_smarts)
    return len(mol.GetSubstructMatches(sulfur))

def rule5_phosphorus_atom(mol):
    phosphorus_smarts = '[P]'
    phosphorus = Chem.MolFromSmarts(phosphorus_smarts)
    return len(mol.GetSubstructMatches(phosphorus))

def rule6_complex_structure(mol):
    return rdMolDescriptors.CalcNumRings(mol) + rdMolDescriptors.CalcNumRotatableBonds(mol)
