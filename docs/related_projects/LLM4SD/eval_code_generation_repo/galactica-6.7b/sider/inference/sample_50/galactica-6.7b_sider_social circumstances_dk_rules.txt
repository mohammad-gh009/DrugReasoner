def rule1_contains_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_contains_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule3_contains_halogen(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule4_high_lipophilicity(mol):
    return Descriptors.MolLogP(mol)

def rule5_high_molecular_weight(mol):
    return Descriptors.MolWt(mol)

def rule6_contains_adverse_functional_group(mol):
    return rule1_contains_nitro_group(mol)

def rule7_contains_polar_functional_group(mol):
    amino_pattern = Chem.MolFromSmarts('N')
    return len(mol.GetSubstructMatches(amino_pattern))

def rule8_ring_structure(mol):
    return rdMolDescriptors.CalcNumRings(mol)

def rule9_phosphate_group(mol):
    phosphate_smarts = '[PX4](=O)([O-])[O-]'
    phosphate_pattern = Chem.MolFromSmarts(phosphate_smarts)
    return len(mol.GetSubstructMatches(phosphate_pattern))

def rule10_sodium_ion(mol):
    sodium_smarts = '[Na+]'
    sodium_pattern = Chem.MolFromSmarts(sodium_smarts)
    return len(mol.GetSubstructMatches(sodium_pattern))

def rule11_multiple_functional_groups(mol):
    carbonyl_smarts = '[CX3]=[OX1]'
    nitro_smarts = '[NX3](=O)=O'
    carbonyl_pattern = Chem.MolFromSmarts(carbonyl_smarts)
    nitro_pattern = Chem.MolFromSmarts(nitro_smarts)
    return len(mol.GetSubstructMatches(carbonyl_pattern)) + len(mol.GetSubstructMatches(nitro_pattern))

def rule13_nitrogen_atom(mol):
    return len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 7])


def rule1_nitro_group(mol):
    nitro_smarts = '[NX3](=O)=O'
    nitro_pattern = Chem.MolFromSmarts(nitro_smarts)
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule3_carbonyl_group(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]=[#8]')))

def rule4_halogen_atom(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#9,#17,#35,#53]')))

def rule5_adverse_effects(mol):
    nitro_group = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]')))
    lipophilicity = Descriptors.MolLogP(mol)
    molecular_weight = Descriptors.MolWt(mol)
    return nitro_group, lipophilicity, molecular_weight

def rule6_benzene_ring(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('c1ccccc1')))

def rule7_adverse_effects(mol):
    sulfonamide_group = len(mol.GetSubstructMatches(Chem.MolFromSmarts('S(=O)(=O)N')))
    nitro_group = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]')))
    halogen_group = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#9,#17,#35,#53]')))
    return sulfonamide_group, nitro_group, halogen_group

def rule8_adverse_effects(mol):
    benzene_ring = len(mol.GetSubstructMatches(Chem.MolFromSmarts('c1ccccc1')))
    alcohol_group = len(mol.GetSubstructMatches(Chem.MolFromSmarts('O[H]')))
    carboxylic_acid_group = len(mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)O')))
    return benzene_ring, alcohol_group, carboxylic_acid_group

def rule9_hydroxyl_group(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('O[H]')))

def rule10_less_adverse_effects(mol):
    nitro_group = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]')))
    chlorine_atom = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#17]')))

def rule1_nitro_group(mol):
    nitro_group = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_group))

def rule2_chlorine_atom(mol):
    chlorine_atom = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(chlorine_atom))

def rule3_carbonyl_group(mol):
    carbonyl_group = Chem.MolFromSmarts('[#6]=[#8]')
    return len(mol.GetSubstructMatches(carbonyl_group))

def rule4_functional_group(mol):
    return rule1_nitro_group(mol)

def rule5_amino_group(mol):
    amino_group = Chem.MolFromSmarts('[N;H1,H2]')
    return len(mol.GetSubstructMatches(amino_group))

def rule6_benzene_ring(mol):
    benzene_ring = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(benzene_ring))

def rule7_halogen_atom(mol):
    halogen_atom = Chem.MolFromSmarts('[Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_atom))

def rule8_halogen_atom(mol):
    halogen_atom = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_atom))
