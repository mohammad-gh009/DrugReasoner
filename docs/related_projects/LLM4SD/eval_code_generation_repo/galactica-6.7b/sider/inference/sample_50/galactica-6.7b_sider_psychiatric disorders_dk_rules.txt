def rule1_contains_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_contains_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule3_contains_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('[#6]=[O]')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule4_contains_benzene_ring(mol):
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(benzene_pattern))

def rule5_contains_bromine_atom(mol):
    bromine_pattern = Chem.MolFromSmarts('[Br]')
    return len(mol.GetSubstructMatches(bromine_pattern))

def rule6_contains_nitro_and_carbonyl_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    carbonyl_pattern = Chem.MolFromSmarts('[#6]=[O]')
    return len(mol.GetSubstructMatches(nitro_pattern)) and len(mol.GetSubstructMatches(carbonyl_pattern))

def rule7_contains_hydroxyl_group(mol):
    hydroxyl_pattern = Chem.MolFromSmarts('[OH]')
    return len(mol.GetSubstructMatches(hydroxyl_pattern))

def rule8_high_lipophilicity(mol):
    return Descriptors.MolLogP(mol)

def rule9_high_molecular_weight(mol):
    return Descriptors.MolWt(mol)

def rule10_contains_chlorine(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'Cl')

def rule11_contains_nitrogen(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N')

def rule1_contains_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_contains_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule3_contains_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule4_contains_sulfonyl_group(mol):
    sulfonyl_pattern = Chem.MolFromSmarts('S(=O)(=O)')

def rule5_benzene_ring(mol):
    benzene_smiles = 'c1ccccc1'
    benzene = Chem.MolFromSmiles(benzene_smiles)
    return len(mol.GetSubstructMatches(benzene))

def rule6_nitrogen_atom(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('N')))

def rule7_carbonyl_group(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('C=O')))

def rule8_chlorine_atom(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('Cl')))

def rule9_nitro_group(mol):
    nitro_group = Chem.MolFromSmiles('N(=O)=O')
    if nitro_group is not None:
        return len(mol.GetSubstructMatches(nitro_group))
    else:
        return 0


def rule10_halogen_atom(mol):
    halogens = ['F', 'Cl', 'Br', 'I']
    return sum(len(mol.GetSubstructMatches(Chem.MolFromSmiles(x))) for x in halogens)

def rule11_benzene_ring(mol):
    benzene_smiles = 'c1ccccc1'
    benzene = Chem.MolFromSmiles(benzene_smiles)
    return len(mol.GetSubstructMatches(benzene))
