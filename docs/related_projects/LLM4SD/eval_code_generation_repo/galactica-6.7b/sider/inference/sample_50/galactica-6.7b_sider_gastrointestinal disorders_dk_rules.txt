def rule1_carbonyl_group(mol):
    pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(pattern))

def rule2_nitro_group(mol):
    pattern = Chem.MolFromSmarts('N(=O)=O')
    return len(mol.GetSubstructMatches(pattern))

def rule3_halogen_atom(mol):
    pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(pattern))

def rule4_carboxylic_acid_group(mol):
    pattern = Chem.MolFromSmarts('C(=O)O')
    return len(mol.GetSubstructMatches(pattern))

def rule5_alcohol_group(mol):
    pattern = Chem.MolFromSmarts('O')
    return len(mol.GetSubstructMatches(pattern))

def rule6_halogenated_aromatic_ring(mol):
    pattern = Chem.MolFromSmarts('c1ccccc1[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(pattern))

def rule7_chlorine_atom(mol):
    pattern = Chem.MolFromSmarts('Cl')
    return len(mol.GetSubstructMatches(pattern))

def rule8_amide_group(mol):
    pattern = Chem.MolFromSmarts('C(=O)N')
    return len(mol.GetSubstructMatches(pattern))

def rule9_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule10_sulfonamide_group(mol):
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    return len(mol.GetSubstructMatches(sulfonamide_pattern))

def rule11_sulfonamide_benzodiazepine_group(mol):
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    benzodiazepine_pattern = Chem.MolFromSmarts('c1ccc2c(c1)CC(=NCCN2)c3ccccc3')
    return len(mol.GetSubstructMatches(sulfonamide_pattern)) and len(mol.GetSubstructMatches(benzodiazepine_pattern))

def rule12_benzodiazepine_group(mol):
    benzodiazepine_pattern = Chem.MolFromSmarts('c1ccc2c(c1)CC(=NCCN2)c3ccccc3')
    return len(mol.GetSubstructMatches(benzodiazepine_pattern))

def rule1_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_hydroxyl_group(mol):
    hydroxyl_pattern = Chem.MolFromSmarts('[OH]')
    return len(mol.GetSubstructMatches(hydroxyl_pattern))

def rule3_chlorine_atom(mol):
    chlorine_pattern = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule4_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')

def rule5_halogen_presence(mol):
    halogens = ['F', 'Cl', 'Br']
    for atom in mol.GetAtoms():
        if atom.GetSymbol() in halogens:
            return 1
    return 0

def rule6_nitrogen_presence(mol):
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'N':
            return 1
    return 0

def rule7_amide_ester_presence(mol):
    amide_pattern = Chem.MolFromSmarts('C(=O)N')
    ester_pattern = Chem.MolFromSmarts('C(=O)O')
    if mol.HasSubstructMatch(amide_pattern) or mol.HasSubstructMatch(ester_pattern):
        return 1
    return 0

def rule9_nitro_group_presence(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    if mol.HasSubstructMatch(nitro_pattern):
        return 1
    return 0

def rule12_amidine_sulfonamide_presence(mol):
    amidine_pattern = Chem.MolFromSmarts('C(=N)N')
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    if mol.HasSubstructMatch(amidine_pattern) or mol.HasSubstructMatch(sulfonamide_pattern):
        return 1
    return 0

def rule13_complex_presence(mol):
    amide_pattern = Chem.MolFromSmarts('C(=O)N')
    imide_pattern = Chem.MolFromSmarts('C(=O)N(C=O)')
    urea_pattern = Chem.MolFromSmarts('NC(=O)N')
    halogen_aromatic_pattern = Chem.MolFromSmarts('cX')
    pah_pattern = Chem.MolFromSmarts('c1ccccc1c2ccccc2')

    patterns = [amide_pattern, imide_pattern, urea_pattern, halogen_aromatic_pattern, pah_pattern]
    for pattern in patterns:
        if pattern is not None and mol.HasSubstructMatch(pattern):
            return 1
    return 0

