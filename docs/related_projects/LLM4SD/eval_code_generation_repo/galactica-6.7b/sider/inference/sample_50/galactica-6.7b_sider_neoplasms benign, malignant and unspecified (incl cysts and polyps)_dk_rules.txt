def rule1_contains_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_contains_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule3_contains_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule6_contains_chlorine_atom(mol):
    chlorine_pattern = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule7_benzene_ring(mol):
    benzene_smiles = 'c1ccccc1'
    benzene = Chem.MolFromSmiles(benzene_smiles)
    return mol.GetSubstructMatches(benzene)

def rule8_carbonyl_nitro_group(mol):
    carbonyl_smiles = 'C=O'
    nitro_smiles = '[N+](=O)[O-]'
    carbonyl = Chem.MolFromSmiles(carbonyl_smiles)
    nitro = Chem.MolFromSmiles(nitro_smiles)
    return mol.GetSubstructMatches(carbonyl) + mol.GetSubstructMatches(nitro)

def rule9_high_molecular_weight(mol):
    return Descriptors.MolWt(mol)

def rule10_hydroxyl_group(mol):
    hydroxyl_smiles = 'O'
    hydroxyl = Chem.MolFromSmiles(hydroxyl_smiles)
    return mol.GetSubstructMatches(hydroxyl)

def rule11_functional_groups(mol):
    aldehyde_smiles = 'C=O'
    ketone_smiles = 'C(=O)C'
    amide_smiles = 'C(=O)N'
    ester_smiles = 'C(=O)OC'
    carboxylic_acid_smiles = 'C(=O)O'
    aldehyde = Chem.MolFromSmiles(aldehyde_smiles)
    ketone = Chem.MolFromSmiles(ketone_smiles)
    amide = Chem.MolFromSmiles(amide_smiles)
    ester = Chem.MolFromSmiles(ester_smiles)
    carboxylic_acid = Chem.MolFromSmiles(carboxylic_acid_smiles)
    return mol.GetSubstructMatches(aldehyde) + mol.GetSubstructMatches(ketone) + mol.GetSubstructMatches(amide) + mol.GetSubstructMatches(ester) + mol.GetSubstructMatches(carboxylic_acid)

def rule12_halogen_atoms(mol):
    return rdMolDescriptors.CalcNumHeteroatoms(mol)

def rule13_aromatic_rings(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule14_sulfonyl_group(mol):
    sulfonyl_smiles = 'S(=O)(=O)'
    sulfonyl = Chem.MolFromSmiles(sulfonyl_smiles)
    return mol.GetSubstructMatches(sulfonyl)

def rule1_carbonyl_group(mol):
    carbonyl_smiles = 'C=O'
    carbonyl = Chem.MolFromSmiles(carbonyl_smiles)

def rule2_halogen_atoms(mol):
    halogens = ['F', 'Cl', 'Br', 'I']
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() in halogens)

def rule3_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule4_bromine_atom(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'Br')

def rule5_nitrogen_atom(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N')

def rule6_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule7_phosphate_group(mol):
    phosphate_pattern = Chem.MolFromSmarts('[PX4](=O)([O-])[O-]')
    return len(mol.GetSubstructMatches(phosphate_pattern))

def rule8_chloride_ion(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'Cl')

def rule9_carbonyl_benzene(mol):
    carbonyl_pattern = Chem.MolFromSmarts('[CX3](=O)[#6]')
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(carbonyl_pattern)) and len(mol.GetSubstructMatches(benzene_pattern))

def rule10_benzene_ring(mol):
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
