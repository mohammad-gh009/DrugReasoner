def rule1_contains_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_contains_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule3_contains_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule4_contains_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule5_contains_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule6_contains_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule7_contains_adverse_effect_group(mol):
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    quinolone_pattern = Chem.MolFromSmarts('c1c2c(ccc1)C(=O)C3=C(O2)C=CC=C3')
    return len(mol.GetSubstructMatches(sulfonamide_pattern)) + len(mol.GetSubstructMatches(quinolone_pattern))

def rule8_tertiary_nitrogen(mol):
    smarts = '[NX3;H0](C)(C)C'
    tertiary_nitrogen = mol.GetSubstructMatches(Chem.MolFromSmarts(smarts))
    return len(tertiary_nitrogen)

def rule9_chloride_platinum(mol):
    smarts = '[Cl-].[Pt+2]'
    chloride_platinum = mol.GetSubstructMatches(Chem.MolFromSmarts(smarts))
    return len(chloride_platinum)

def rule10_adverse_functional_groups(mol):
    smarts = ['S(=O)(=O)N', '[N+](=O)[O-]', 'C(=O)O']
    adverse_functional_groups = sum(len(mol.GetSubstructMatches(Chem.MolFromSmarts(s))) for s in smarts)
    return adverse_functional_groups

def rule11_polar_functional_groups(mol):
    smarts = 'O'
    polar_functional_groups = mol.GetSubstructMatches(Chem.MolFromSmarts(smarts))
    return len(polar_functional_groups)

def rule12_metal_ion(mol):
    smarts = '[Au]'
    metal_ion = mol.GetSubstructMatches(Chem.MolFromSmarts(smarts))
    return len(metal_ion)

def rule13_cyclic_structure(mol):
    return rdMolDescriptors.CalcNumRings(mol)

def rule14_hydroxyl_group(mol):
    smarts = '[OH]'
    hydroxyl_group = mol.GetSubstructMatches(Chem.MolFromSmarts(smarts))
