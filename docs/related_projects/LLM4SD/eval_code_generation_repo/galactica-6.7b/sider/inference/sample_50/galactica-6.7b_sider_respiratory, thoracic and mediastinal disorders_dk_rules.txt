def rule1_contains_nitro(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_contains_chlorine(mol):
    chlorine_pattern = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule3_contains_benzene(mol):
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(benzene_pattern))

def rule4_contains_carbonyl(mol):
    carbonyl_pattern = Chem.MolFromSmarts('[#6]=[O]')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule5_contains_halogen(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule6_contains_carbonyl(mol):
    carbonyl_pattern = Chem.MolFromSmarts('[#6]=[O]')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule7_contains_pah(mol):
    pah_pattern = Chem.MolFromSmarts('c1cccc2c1cccc2')
    return len(mol.GetSubstructMatches(pah_pattern))

def rule8_contains_sulfur(mol):
    sulfur_pattern = Chem.MolFromSmarts('[S]')
    return len(mol.GetSubstructMatches(sulfur_pattern))

def rule9_contains_amidine_or_guanidine(mol):
    amidine_pattern = Chem.MolFromSmarts('C(=N)N')
    guanidine_pattern = Chem.MolFromSmarts('C(=N)(N)N')
    return len(mol.GetSubstructMatches(amidine_pattern)) + len(mol.GetSubstructMatches(guanidine_pattern))



def rule11_aromatic_rings(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule12_ferrocene_group(mol):
    from rdkit import Chem
    ferrocene_smarts = '[Fe]1(-c2ccccc2-c3ccccc3)2(-c4ccccc4-c5ccccc5)CCCCC1CCCCC2'
    ferrocene = Chem.MolFromSmarts(ferrocene_smarts)
    if ferrocene is not None:
        return len(mol.GetSubstructMatches(ferrocene))
    else:
        return 0


def rule13_carbonyl_and_benzene(mol):
    carbonyl_smarts = '[#6]=[#8]'
    benzene_smarts = 'c1ccccc1'
    carbonyl = Chem.MolFromSmarts(carbonyl_smarts)
    benzene = Chem.MolFromSmarts(benzene_smarts)
    return len(mol.GetSubstructMatches(carbonyl)) and len(mol.GetSubstructMatches(benzene))

def rule1_nitro_group(mol):
    nitro_smarts = '[N+](=O)[O-]'
    nitro = Chem.MolFromSmarts(nitro_smarts)
    return len(mol.GetSubstructMatches(nitro))

def rule2_chlorine_atom(mol):
    chlorine_smarts = '[Cl]'
    chlorine = Chem.MolFromSmarts(chlorine_smarts)
    return len(mol.GetSubstructMatches(chlorine))

def rule3_bromine_atom(mol):
    bromine_smarts = '[Br]'
    bromine = Chem.MolFromSmarts(bromine_smarts)
    return len(mol.GetSubstructMatches(bromine))

def rule4_carbonyl_group(mol):
    carbonyl_smarts = '[#6]=[#8]'
    carbonyl = Chem.MolFromSmarts(carbonyl_smarts)
    return len(mol.GetSubstructMatches(carbonyl))

def rule5_hydroxyl_group(mol):
    hydroxyl_smarts = '[OH]'
    hydroxyl = Chem.MolFromSmarts(hydroxyl_smarts)
    return len(mol.GetSubstructMatches(hydroxyl))

def rule6_contains_nitrogen(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N')

def rule7_contains_sulfur(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'S')

def rule8_contains_phosphorus(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'P')

def rule9_contains_carbonyl(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'C' and atom.GetTotalNumHs() == 0)

def rule10_contains_halogen(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() in ['Cl', 'Br', 'I'])

def rule1_contains_carbonyl_or_nitro(mol):
    carbonyl_count = sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'C' and atom.GetTotalNumHs() == 0)
    nitro_count = sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N' and atom.GetTotalNumHs() == 2)
    return carbonyl_count + nitro_count

def rule2_contains_halogenated_aromatic_or_halogen(mol):
    halogen_count = sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() in ['F', 'Cl', 'Br'])
    aromatic_count = sum(1 for atom in mol.GetAtoms() if atom.GetIsAromatic() and atom.GetSymbol() in ['F', 'Cl', 'Br'])
    return halogen_count + aromatic_count

def rule3_pah_structure(mol):
    pah_smarts = 'c1ccc2cc3ccccc3cc2c1'
    pah_pattern = Chem.MolFromSmarts(pah_smarts)
    return len(mol.GetSubstructMatches(pah_pattern))

def rule4_adverse_effects(mol):
    nitro_smarts = '[N+](=O)[O-]'
    carbonyl_smarts = 'C=O'
    halogen_smarts = '[F,Cl,Br,I]'

def rule5_benzene_ring(mol):
    benzene_smarts = 'c1ccccc1'
    benzene_pattern = Chem.MolFromSmarts(benzene_smarts)
    return len(mol.GetSubstructMatches(benzene_pattern))

def rule6_chlorine_atom(mol):
    chlorine_smarts = '[Cl]'
    chlorine_pattern = Chem.MolFromSmarts(chlorine_smarts)
