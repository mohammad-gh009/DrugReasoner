def rule1_contains_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_contains_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule3_contains_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule4_contains_sulfonamide_group(mol):
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    return len(mol.GetSubstructMatches(sulfonamide_pattern))

def rule5_contains_benzene_ring(mol):
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(benzene_pattern))

def rule6_contains_chlorine_atom(mol):
    chlorine_pattern = Chem.MolFromSmarts('Cl')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule7_contains_polar_functional_group(mol):
    polar_functional_group_pattern = Chem.MolFromSmarts('[N,O,S]')
    return len(mol.GetSubstructMatches(polar_functional_group_pattern))

def rule8_contains_functional_groups(mol):
    functional_groups_pattern = Chem.MolFromSmarts('[CX3](=O)[#6]')
    return len(mol.GetSubstructMatches(functional_groups_pattern))

def rule9_lipophilicity(mol):
    return Descriptors.MolLogP(mol)

def rule10_complexity(mol):
    return Descriptors.FpDensityMorgan1(mol)

def rule11_mol_weight(mol):
    return Descriptors.MolWt(mol)

def rule12_halogenated_aromatic(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol) and rdMolDescriptors.CalcNumHeteroatoms(mol)

def rule13_carboxylic_acid(mol):
    pattern = '[CX3](=O)[OX2H1]'
    carboxylic_acid_pattern = Chem.MolFromSmarts(pattern)
    return len(mol.GetSubstructMatches(carboxylic_acid_pattern))


def rule14_phenyl_group(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule15_polar_surface_area(mol):
    return rdMolDescriptors.CalcTPSA(mol)



def rule1_adverse_effects(mol):
    functional_groups = ['S(=O)(=O)', '[N+](=O)[O-]', 'X', 'C=O', '[CX3H1](=O)', '[CX3](=O)[#6]', '[NX3][CX3](=[OX1])[#6]', '[CX3](=[OX1])[OX2H1]']
    return sum(mol.HasSubstructMatch(Chem.MolFromSmarts(fg)) if Chem.MolFromSmarts(fg) is not None else 0 for fg in functional_groups)


def rule2_adverse_effects(mol):
    notorious_atoms = ['Cl']
    return sum(mol.HasSubstructMatch(Chem.MolFromSmarts(na)) for na in notorious_atoms)


def rule3_adverse_effects(mol):
    return Descriptors.MolWt(mol), Descriptors.NumRotatableBonds(mol)

def rule4_adverse_effects(mol):
    functional_groups = ['[N+](=O)[O-]', 'C=O', 'Cl', 'S(=O)(=O)']
    return sum(mol.HasSubstructMatch(Chem.MolFromSmarts(fg)) for fg in functional_groups)

def rule5_lipophilicity(mol):
    return Descriptors.MolLogP(mol)

def rule6_ring_structure(mol):
    return rdMolDescriptors.CalcNumRings(mol)

def rule7_polar_functional_groups(mol):
    return rdMolDescriptors.CalcNumLipinskiHBA(mol)

def rule8_specific_groups(mol):
    carboxylic_acid_smarts = '[CX3](=O)[OX2H1]'
    phenyl_smarts = '[c1ccccc1]'
    piperazine_smarts = '[N]1CCNCC1'
    carboxylic_acid = len(mol.GetSubstructMatches(Chem.MolFromSmarts(carboxylic_acid_smarts)))
    phenyl = len(mol.GetSubstructMatches(Chem.MolFromSmarts(phenyl_smarts)))
    piperazine = len(mol.GetSubstructMatches(Chem.MolFromSmarts(piperazine_smarts)))
    return carboxylic_acid + phenyl + piperazine

def rule9_adverse_functional_groups(mol):
    sulfonamide_smarts = '[S](=O)(=O)[N]'
    nitro_smarts = '[N+](=O)[O-]'
    sulfonamide = len(mol.GetSubstructMatches(Chem.MolFromSmarts(sulfonamide_smarts)))
    nitro = len(mol.GetSubstructMatches(Chem.MolFromSmarts(nitro_smarts)))
    return sulfonamide + nitro
