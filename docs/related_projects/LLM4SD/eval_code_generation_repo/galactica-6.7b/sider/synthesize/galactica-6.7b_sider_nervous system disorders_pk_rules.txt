def rule1_logP(mol):
    return Descriptors.MolLogP(mol)

def rule2_hb_donors(mol):
    return rdMolDescriptors.CalcNumHBD(mol)

def rule3_hb_acceptors(mol):
    return rdMolDescriptors.CalcNumHBA(mol)

def rule4_mol_weight(mol):
    return Descriptors.MolWt(mol)

def rule5_aromatic_rings(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule6_psa(mol):
    return rdMolDescriptors.CalcTPSA(mol)

def rule7_sulfur_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('S')))

def rule8_chlorine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('Cl')))

def rule9_fluorine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('F')))

def rule10_bromine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('Br')))

def rule11_iodine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('I')))

def rule12_hydroxyl_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('O')))

def rule13_amino_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('N')))

def rule15_ester_groups(mol):
    ester_smarts = '[#6][#8][#6]'
    ester_pattern = Chem.MolFromSmarts(ester_smarts)
    return len(mol.GetSubstructMatches(ester_pattern))

def rule16_ether_groups(mol):
    ether_smarts = '[#6]-[#8]-[#6]'
    ether_pattern = Chem.MolFromSmarts(ether_smarts)
    return len(mol.GetSubstructMatches(ether_pattern))

def rule17_thioether_groups(mol):
    thioether_smarts = '[#6]-[#16]-[#6]'
    thioether_pattern = Chem.MolFromSmarts(thioether_smarts)
    return len(mol.GetSubstructMatches(thioether_pattern))

def rule18_sulfoxide_groups(mol):
    sulfoxide_smarts = '[#6]-[#16](=[#8])-[#6]'
    sulfoxide_pattern = Chem.MolFromSmarts(sulfoxide_smarts)
    return len(mol.GetSubstructMatches(sulfoxide_pattern))

def rule19_sulfone_groups(mol):
    sulfone_smarts = '[#6]-[#16](=[#8])(=[#8])-[#6]'
    sulfone_pattern = Chem.MolFromSmarts(sulfone_smarts)
    return len(mol.GetSubstructMatches(sulfone_pattern))

def rule20_nitro_groups(mol):
    nitro_smarts = '[#6]-[#7](-[#8])=[#8]'
    nitro_pattern = Chem.MolFromSmarts(nitro_smarts)
