def rule1_molecular_weight(mol):
    return rdMolDescriptors.CalcExactMolWt(mol)

def rule2_hb_donors(mol):
    return rdMolDescriptors.CalcNumHBD(mol)

def rule2_hb_acceptors(mol):
    return rdMolDescriptors.CalcNumHBA(mol)

def rule3_logP(mol):
    return Descriptors.MolLogP(mol)

def rule4_aromatic_rings(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule5_TPSA(mol):
    return rdMolDescriptors.CalcTPSA(mol)

def rule7_nitrogen_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('N')))

def rule8_oxygen_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('O')))

def rule9_sulfur_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('S')))

def rule10_chlorine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('Cl')))

def rule11_fluorine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('F')))

def rule12_bromine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('Br')))

def rule13_iodine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('I')))

def rule15_double_bonds(mol):
    return len([bond for bond in mol.GetBonds() if bond.GetBondType() == Chem.rdchem.BondType.DOUBLE])

def rule16_triple_bonds(mol):
    return len([bond for bond in mol.GetBonds() if bond.GetBondType() == Chem.rdchem.BondType.TRIPLE])

def rule17_num_rings(mol):
    return rdMolDescriptors.CalcNumRings(mol)

def rule18_num_func_groups(mol):
    func_groups = [Chem.MolFromSmarts('[#6](=[#8])-[#8]'),  # Carboxyl
                   Chem.MolFromSmarts('[#7](-[#1])-[#6]')]  # Primary amine
    return sum(mol.HasSubstructMatch(fg) for fg in func_groups)

def rule19_num_stereocenters(mol):
    return len(Chem.FindMolChiralCenters(mol, includeUnassigned=True))
