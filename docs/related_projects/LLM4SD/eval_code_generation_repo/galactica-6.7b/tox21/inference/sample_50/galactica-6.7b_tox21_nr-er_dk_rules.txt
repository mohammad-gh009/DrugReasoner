def rule1_toxicity_indicator(mol):
    carbonyl_group = Chem.MolFromSmarts('C=O')
    nitro_group = Chem.MolFromSmarts('[N+](=O)[O-]')
    return mol.GetSubstructMatches(carbonyl_group) + mol.GetSubstructMatches(nitro_group)

def rule2_halogen_presence(mol):
    halogens = Chem.MolFromSmarts('[F,Cl,Br,I]')
    return mol.GetSubstructMatches(halogens)

def rule3_pah_presence(mol):
    pah = Chem.MolFromSmarts('c1ccccc1-c2ccccc2')
    return mol.GetSubstructMatches(pah)

def rule4_nitro_group_presence(mol):
    nitro_group = Chem.MolFromSmarts('[N+](=O)[O-]')
    return mol.GetSubstructMatches(nitro_group)

def rule5_chlorine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[Cl]')))

def rule6_carbonyl_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]=[#8]')))

def rule7_benzene_ring(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('c1ccccc1')))

def rule8_nitrogen_lone_pair(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#7;v3]')))

def rule9_phosphorus_atom(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#15]')))

def rule1_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_chlorine_atom(mol):
    chlorine_pattern = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule3_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('[#6]=[#8]')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule4_carbonyl_or_nitro(mol):
    return rule1_nitro_group(mol) + rule3_carbonyl_group(mol)

def rule5_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[#9,#17,#35,#53]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule6_benzene_ring(mol):
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(benzene_pattern))

def rule7_halogen_atom(mol):
    return rule5_halogen_atom(mol)

def rule8_aromatic_or_halogen(mol):
    return rule5_halogen_atom(mol) + rule6_benzene_ring(mol)

def rule9_carbonyl_or_hydroxyl(mol):
    hydroxyl_pattern = Chem.MolFromSmarts('[#8H]')

def rule10_contains_chlorine(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'Cl')

def rule1_contains_halogen(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() in ['Cl', 'Br', 'I', 'F'])

def rule2_contains_carbonyl(mol):
    return rdMolDescriptors.CalcNumAliphaticCarbocycles(mol)

def rule3_contains_nitro(mol):
    nitro_pattern = Chem.MolFromSmarts('[!#6;!#1;!H0]')
    matches = mol.GetSubstructMatches(nitro_pattern)
    return len(matches)


def rule4_contains_double_bond(mol):
    count = 0
    for bond in mol.GetBonds():
        if bond.GetBondType().name == 'DOUBLE' and bond.GetIsAromatic() == False:
            count += 1
    return count


def rule5_toxicity_activity(mol):
    return rule1_contains_halogen(mol) + rule2_contains_carbonyl(mol) + rule3_contains_nitro(mol)

def rule6_toxicity_activity(mol):
    return rule3_contains_nitro(mol)

def rule7_toxicity_activity(mol):
    return rule2_contains_carbonyl(mol)
