def rule1_nitro_group(mol):
    nitro_group = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_group))

def rule2_chlorine_atom(mol):
    chlorine_atom = Chem.MolFromSmarts('[Cl]')
    return len(mol.GetSubstructMatches(chlorine_atom))

def rule3_carbonyl_group(mol):
    carbonyl_group = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(carbonyl_group))

def rule4_halogen_atom(mol):
    halogen_atom = Chem.MolFromSmarts('[#9,#17,#35,#53]')
    return len(mol.GetSubstructMatches(halogen_atom))

def rule5_arsenic_atom(mol):
    arsenic_atom = Chem.MolFromSmarts('[As]')
    return len(mol.GetSubstructMatches(arsenic_atom))

def rule6_fluorine_atom(mol):
    fluorine_atom = Chem.MolFromSmarts('[F]')
    return len(mol.GetSubstructMatches(fluorine_atom))

def rule9_benzene_ring(mol):
    benzene_ring = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(benzene_ring))

def rule1_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule2_carbonyl_group(mol):
    carbonyl_pattern = Chem.MolFromSmarts('C=O')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def rule3_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[Cl,Br,I]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule4_AhR_binding_motif(mol):
    AhR_pattern = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(AhR_pattern))

def rule5_aromatic_ring(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule6_double_bond(mol):
    double_bond_pattern = Chem.MolFromSmarts('C=C')

def rule1_hb_donors(mol):
    return rdMolDescriptors.CalcNumHBD(mol)

def rule2_hb_acceptor(mol):
    return rdMolDescriptors.CalcNumHBA(mol)

def rule3_halogen_atoms(mol):
    halogens = ['Cl', 'Br', 'I']
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() in halogens)

def rule4_carbonyl_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]=[#8]')))

def rule5_nitro_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]')))

def rule6_aromatic_rings(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule7_benzene_rings(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('c1ccccc1')))

def rule8_nitro_groups(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]')))

def rule9_chlorine_atoms(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'Cl')

def rule10_halogen_atoms(mol):
    halogens = ['F', 'Cl', 'Br']
