def rule1_toxicity(mol):
    benzene_ring = mol.GetSubstructMatches(Chem.MolFromSmarts('c1ccccc1'))
    chlorine_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts('[Cl]'))
    nitrogen_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts('[N]'))
    return len(benzene_ring) + len(chlorine_atoms) + len(nitrogen_atoms)

def rule2_toxicity(mol):
    carbonyl_group = mol.GetSubstructMatches(Chem.MolFromSmarts('C=O'))
    return len(carbonyl_group)

def rule3_toxicity(mol):
    chlorine_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts('[Cl]'))
    nitrogen_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts('[N]'))
    sulfur_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts('[S]'))
    return len(chlorine_atoms) + len(nitrogen_atoms) + len(sulfur_atoms)

def rule4_toxicity(mol):
    nitrogen_positive = mol.GetSubstructMatches(Chem.MolFromSmarts('[N+]'))
    chlorine_negative = mol.GetSubstructMatches(Chem.MolFromSmarts('[Cl-]'))
    bromine_positive = mol.GetSubstructMatches(Chem.MolFromSmarts('[Br+]'))
    return len(nitrogen_positive) + len(chlorine_negative) + len(bromine_positive)

def rule5_toxicity(mol):
    chlorine_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts('[Cl]'))
    nitrogen_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts('[N]'))
    carbonyl_group = mol.GetSubstructMatches(Chem.MolFromSmarts('C=O'))

def rule6_toxic_groups(mol):
    carboxylic_acid = mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)O'))
    sulfonamide = mol.GetSubstructMatches(Chem.MolFromSmarts('S(=O)(=O)N'))
    nitro = mol.GetSubstructMatches(Chem.MolFromSmarts('N(=O)=O'))
    return len(carboxylic_acid) + len(sulfonamide) + len(nitro)

def rule7_toxic_atoms(mol):
    carbon = len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6])
    hydrogen = len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 1])
    nitrogen = len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 7])
    oxygen = len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 8])
    chlorine = len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 17])
    fluorine = len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 9])
    return carbon + hydrogen + nitrogen + oxygen + chlorine + fluorine


def rule8_toxic_charged_atoms(mol):
    nitrogen_positive = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[n+]')))
    sulfur_negative = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[s-]')))
    carbonyl_positive = len(mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)[O+]')))
    return nitrogen_positive + sulfur_negative + carbonyl_positive

def rule9_toxic_features(mol):
    aromatic_rings = rdMolDescriptors.CalcNumAromaticRings(mol)
    halogen_atoms = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#9,#17,#35,#53]')))
    nitrogen_atoms = len(mol.GetSubstructMatches(Chem.MolFromSmarts('N')))
    hb_acceptors = rdMolDescriptors.CalcNumHBA(mol)
    hb_donors = rdMolDescriptors.CalcNumHBD(mol)
    rotatable_bonds = rdMolDescriptors.CalcNumRotatableBonds(mol)
    heavy_atoms = mol.GetNumHeavyAtoms()
    hydrogen_atoms = mol.GetNumAtoms() - heavy_atoms
    return aromatic_rings + halogen_atoms + nitrogen_atoms + hb_acceptors - hb_donors + rotatable_bonds - aromatic_rings + heavy_atoms - hydrogen_atoms

def rule11_toxic_elements(mol):
    nitrogen = len(mol.GetSubstructMatches(Chem.MolFromSmarts('N')))
    carbonyl = len(mol.GetSubstructMatches(Chem.MolFromSmarts('C=O')))
    chlorine = len(mol.GetSubstructMatches(Chem.MolFromSmarts('Cl')))
