def rule1_carbonyl(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('C=O')))

def rule2_nitrogen(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('N')))

def rule3_sulfur(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('S')))

def rule4_carbonyl_positive(mol):
    if len(mol.GetSubstructMatches(Chem.MolFromSmarts('C=O'))) > 0 and Descriptors.MolWt(mol) > 0:
        return 1
    else:
        return 0

def rule5_sulfonamide(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('S(=O)(=O)N')))

def rule6_nitro(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]')))

def rule7_nitrogen_positive(mol):
    if len(mol.GetSubstructMatches(Chem.MolFromSmarts('N'))) > 0 and Descriptors.MolWt(mol) > 0:
        return 1
    else:
        return 0

def rule8_chlorine_negative(mol):
    if len(mol.GetSubstructMatches(Chem.MolFromSmarts('Cl'))) > 0 and Descriptors.MolWt(mol) < 0:
        return 1
    else:
        return 0

def rule9_sulfur_positive_charge(mol):
    sulfur_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#16+]')))
    return sulfur_count

def rule10_chlorine_positive_charge(mol):
    chlorine_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#17+]')))
    return chlorine_count

def rule11_benzoic_acid(mol):
    benzoic_acid_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('c1ccccc1C(=O)O')))
    return benzoic_acid_count

def rule12_chlorine_atom(mol):
    chlorine_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#17]')))
    return chlorine_count

def rule13_bromine_atom(mol):
    bromine_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#35]')))
    return bromine_count

def rule14_carbonyl_positive_nitrogen(mol):
    carbonyl_positive_nitrogen_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6](=[#8])[#7+]')))
    return carbonyl_positive_nitrogen_count

def rule15_sulfur_carbon_negative(mol):
    sulfur_carbon_negative_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#16-]-[#6]')))
    return sulfur_carbon_negative_count

def rule16_chlorine_carbon_negative(mol):
    chlorine_carbon_negative_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#17-]-[#6]')))
    return chlorine_carbon_negative_count

def rule17_benzene_ring(mol):
    aromatic_atoms = [atom.GetIsAromatic() for atom in mol.GetAtoms()]
    return aromatic_atoms.count(True)

def rule18_contains_Cl(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'Cl')

def rule19_contains_COO(mol):
    patt = Chem.MolFromSmarts('CC(=O)')
    return len(mol.GetSubstructMatches(patt))

def rule20_contains_N(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N')

def rule21_contains_N_plus(mol):
    patt = Chem.MolFromSmarts('[N+][C]')
    return len(mol.GetSubstructMatches(patt))

def rule22_contains_COCOO(mol):
    patt = Chem.MolFromSmarts('COC(=O)O')
    return len(mol.GetSubstructMatches(patt))

def rule23_contains_NCO(mol):
    patt = Chem.MolFromSmarts('[N][C](=O)')
    return len(mol.GetSubstructMatches(patt))

def rule24_contains_SCO(mol):
    patt = Chem.MolFromSmarts('[S][C](=O)')
    return len(mol.GetSubstructMatches(patt))

def rule25_toxicity(mol):
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'Cl':
            for neighbor in atom.GetNeighbors():
                if neighbor.GetSymbol() == 'C':
                    for neighbor2 in neighbor.GetNeighbors():
                        if neighbor2.GetSymbol() == 'O' and neighbor2.GetDoubleBondedAtoms():
                            return 1
    return 0

def rule26_toxicity(mol):
    aromatic_atoms = [atom for atom in mol.GetAtoms() if atom.GetIsAromatic()]
    if len(aromatic_atoms) >= 6:
        return 1
    return 0

def rule27_toxicity(mol):
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'S' and atom.GetFormalCharge() < 0:
            return 1
    return 0

def rule28_toxicity(mol):
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'N' and atom.GetFormalCharge() > 0:
            return 1
    return 0

def rule29_toxicity(mol):
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'Cl' and atom.GetFormalCharge() < 0:
            return 1
    return 0

def rule30_toxicity(mol):
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'C':
            for neighbor in atom.GetNeighbors():
                if neighbor.GetSymbol() == 'O' and neighbor.GetDoubleBondedAtoms():
                    for neighbor2 in neighbor.GetNeighbors():
                        if neighbor2.GetSymbol() == 'O' and neighbor2.GetSingleBondedAtoms():
                            return 1
    return 0

def rule31_toxicity(mol):
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'S' and atom.GetFormalCharge() < 0:
            return 1
    return 0

def rule32_toxicity(mol):
    for atom in mol.GetAtoms():
        if atom.GetSymbol() == 'N' and atom.GetFormalCharge() > 0:
            return 1
