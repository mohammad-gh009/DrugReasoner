def rule1_contains_chlorine(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'Cl')

def rule2_contains_nitrogen(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N')

def rule3_contains_carbonyl(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'C' and atom.GetTotalNumHs() == 1)

def rule4_nitrogen_positive_charge(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N' and atom.GetFormalCharge() > 0)

def rule5_chlorine_negative_charge(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'Cl' and atom.GetFormalCharge() < 0)

def rule6_sulfur_negative_charge(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'S' and atom.GetFormalCharge() < 0)

def rule7_contains_benzene(mol):
    return sum(1 for ring in mol.GetRingInfo().AtomRings() if len(ring) == 6 and all(mol.GetAtomWithIdx(idx).GetSymbol() == 'C' for idx in ring))

def rule8_chlorine_positive_charge(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'Cl' and atom.GetFormalCharge() > 0)

def rule9_nitrogen_negative_charge(mol):
    nitrogen_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[n-]')))
    return nitrogen_count

def rule10_carbonyl_positive_charge(mol):
    carbonyl_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[C+](=O)')))
    return carbonyl_count

def rule11_nitrogen_carbon_carbonyl(mol):
    ncc_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[N;H1,H2][C][C](=O)')))
    return ncc_count

def rule12_benzene_ring(mol):
    benzene_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('c1ccccc1')))
    return benzene_count

def rule13_halogen_atom(mol):
    halogen_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[F,Cl,Br,I]')))
    return halogen_count

def rule14_nitrogen_configuration(mol):
    nitro_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[N+](=O)[O-]')))
    return nitro_count

def rule15_nitrogen_carbonyl(mol):
    nc_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[N][C](=O)')))
    return nc_count

def rule16_sulfur_nitrogen(mol):
    sn_count = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[S][N]')))
    return sn_count

def rule17_hb_donors_acceptors(mol):
    return rdMolDescriptors.CalcNumHBD(mol) + rdMolDescriptors.CalcNumHBA(mol)

def rule18_aromatic_rings_heteroatoms(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol) + rdMolDescriptors.CalcNumHeteroatoms(mol)

def rule19_polar_functional_groups(mol):
    return rdMolDescriptors.CalcNumAliphaticRings(mol)

def rule20_polar_functional_groups_charged_atoms(mol):
    return rdMolDescriptors.CalcNumAliphaticRings(mol) + rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule21_aromatic_rings_heterocyclic_rings(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol) + rdMolDescriptors.CalcNumHeterocycles(mol)

def rule22_halogen_atoms(mol):
    return rdMolDescriptors.CalcNumHeteroatoms(mol)

def rule23_nitrogen_atoms_amines(mol):
    if isinstance(mol, str):
        mol = Chem.MolFromSmiles(mol)
    nitrogen_atoms = sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N')
    return nitrogen_atoms


def rule24_halogen_atoms_nitrogen_atoms(mol):
    num_heteroatoms = rdMolDescriptors.CalcNumHeteroatoms(mol)
    num_oxygen = len(mol.GetSubstructMatches(Chem.MolFromSmiles('O')))
    num_sulfur = len(mol.GetSubstructMatches(Chem.MolFromSmiles('S')))
    num_phosphorus = len(mol.GetSubstructMatches(Chem.MolFromSmiles('P')))
    return num_heteroatoms - num_oxygen - num_sulfur - num_phosphorus


def rule26_rings_and_conjugated_bonds(mol):
    # Calculate the number of aliphatic and aromatic rings
    num_rings = rdMolDescriptors.CalcNumAliphaticRings(mol) + rdMolDescriptors.CalcNumAromaticRings(mol)
    return num_rings


def rule27_nitrogen_presence(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('N')))

def rule28_halogen_presence(mol):
    halogens = ['Cl', 'Br', 'I']
    return sum([len(mol.GetSubstructMatches(Chem.MolFromSmiles(x))) for x in halogens])



def rule30_carbonyl_conjugated(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('C=O')))

def rule31_nitrogen_positive_carbon_negative(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('[N+][C-]')))

def rule32_chlorine_carbon_nitrogen(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('ClC[N]')))

def rule34_nitrogen_heterocyclic_hb_acceptor(mol):
    nitrogen_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts('[n;R]'))
    hb_acceptors = rdMolDescriptors.CalcNumHBA(mol)
    if len(nitrogen_atoms) > 0 and hb_acceptors > 0:
        return 1
    else:
        return 0

def rule35_carbonyl_nitrogen_hb_donor(mol):
    carbonyl_nitrogen = mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]=[#8]-[#7]'))
    hb_donors = rdMolDescriptors.CalcNumHBD(mol)
    if len(carbonyl_nitrogen) > 0 and hb_donors > 0:
        return 1
    else:
        return 0

def rule36_hb_donors_acceptors(mol):
    hb_donors = rdMolDescriptors.CalcNumHBD(mol)
    hb_acceptors = rdMolDescriptors.CalcNumHBA(mol)
    return hb_donors + hb_acceptors

def rule37_aromatic_rings_heteroatoms(mol):
    aromatic_rings = rdMolDescriptors.CalcNumAromaticRings(mol)
    heteroatoms = rdMolDescriptors.CalcNumHeteroatoms(mol)
    return aromatic_rings + heteroatoms

def rule38_polar_groups(mol):
    return rdMolDescriptors.CalcNumAliphaticRings(mol)

def rule39_carbonyl_negative_charge(mol):
    carbonyl_groups = mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]=[#8]'))
    negative_charge = Chem.rdmolops.GetFormalCharge(mol) < 0
    if len(carbonyl_groups) > 0 and negative_charge:
        return 1
    else:
        return 0

def rule40_chlorine_atom(mol):
    chlorine_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts('[#17]'))
    return len(chlorine_atoms)

def rule41_nitrogen_atom(mol):
    nitrogen_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts('[#7]'))
    return len(nitrogen_atoms)

def rule42_sulfur_atom(mol):
    sulfur_atoms = mol.GetSubstructMatches(Chem.MolFromSmarts('[#16]'))
