def rule1_contains_nitrogen(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N')

def rule2_long_carbon_chain(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'C')

def rule3_contains_sulfur(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'S')

def rule4_contains_carboxylic_acid(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'O' and atom.GetTotalDegree() == 1 and atom.GetTotalNumHs() == 1)

def rule5_contains_nitrogen(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N')

def rule6_contains_halogen(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() in ['F', 'Cl', 'Br', 'I'])

def rule7_contains_chlorine(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'Cl')

def rule8_contains_carbonyl(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'O' and atom.GetTotalDegree() == 2)

def rule9_contains_sulfonamide(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'S' and atom.GetTotalDegree() == 4 and atom.GetTotalNumHs() == 0)

def rule10_contains_carboxylic_acid(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'O' and atom.GetTotalDegree() == 1 and atom.GetTotalNumHs() == 1)

def rule11_sulfonamide_presence(mol):
    pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule12_nitro_presence(mol):
    pattern = Chem.MolFromSmarts('N(=O)=O')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule13_rotatable_bonds(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule13_hb_donors(mol):
    return rdMolDescriptors.CalcNumHBD(mol)

def rule14_aromatic_rings(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule14_nitrogen_atoms(mol):
    nitrogen_atom = Chem.MolFromSmiles('N')
    matches = mol.GetSubstructMatches(nitrogen_atom)
    return len(matches)


def rule15_carbonyl_groups(mol):
    pattern = Chem.MolFromSmarts('C=O')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule15_oxygen_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#8]')))

def rule18_sulfur_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#16]')))

def rule18_halogens(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[F,Cl,Br,I]')))

def rule21_carbonyl_carboxylic(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]=[#8]'))) + len(mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)[O;h1]')))

def rule22_aromatic_rings(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)



def rule24_carboxylic_acid(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)[O;h1]')))

def rule25_halogen(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#9,#17,#35,#53]')))

def rule26_oxygen(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#8]')))

def rule28_carbon_hydrogen(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]'))) - len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#1]')))

def rule29_hb_donors_acceptors(mol):
    return rdMolDescriptors.CalcNumHBD(mol) + rdMolDescriptors.CalcNumHBA(mol)
