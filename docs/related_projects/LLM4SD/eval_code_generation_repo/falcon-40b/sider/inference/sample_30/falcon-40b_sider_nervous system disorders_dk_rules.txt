def rule1_nitrogen_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('N')))

def rule2_chlorine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('Cl')))

def rule3_sulfur_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('S')))

def rule4_halogen_atoms(mol):
    halogens = ['F', 'Cl', 'Br', 'I']
    return sum(len(mol.GetSubstructMatches(Chem.MolFromSmiles(x))) for x in halogens)

def rule5_special_groups(mol):
    special_groups = ['[Na+]', 'C(=O)O', 'S(=O)(=O)N']
    return sum(len(mol.GetSubstructMatches(Chem.MolFromSmiles(x))) for x in special_groups)

def rule6_charge_groups(mol):
    positive_nitrogen = len(mol.GetSubstructMatches(Chem.MolFromSmiles('[N+]')))
    negative_carbonyl = len(mol.GetSubstructMatches(Chem.MolFromSmiles('C(=O)[O-]')))
    return positive_nitrogen + negative_carbonyl

def rule7_complex_molecules(mol):
    hb_donors = rdMolDescriptors.CalcNumHBD(mol)
    hb_acceptors = rdMolDescriptors.CalcNumHBA(mol)
    aromatic_rings = rdMolDescriptors.CalcNumAromaticRings(mol)
    heterocyclic_rings = rdMolDescriptors.CalcNumHeterocycles(mol)
    polar_groups = rdMolDescriptors.CalcNumAliphaticRings(mol)
    return hb_donors + hb_acceptors + aromatic_rings + heterocyclic_rings + polar_groups

def rule8_metal_ion_or_charged_group(mol):
    metal_count = sum(atom.GetAtomicNum() > 2 and atom.GetAtomicNum() <= 20 for atom in mol.GetAtoms())
    return metal_count + Descriptors.NumHeteroatoms(mol)


def rule9_carbonyl_group(mol):
    pattern = '[#6][#6](=[O])'
    carbonyl = Chem.MolFromSmarts(pattern)
    return len(mol.GetSubstructMatches(carbonyl))


def rule10_carbon_hydrogen_ratio(mol):
    denominator = rdkit.Chem.rdMolDescriptors.CalcNumAliphaticHeterocycles(mol)
    if denominator == 0:
        return 0
    else:
        carbon_count = rdkit.Chem.rdMolDescriptors.CalcNumAliphaticCarbocycles(mol)
        hydrogen_count = rdkit.Chem.rdMolDescriptors.CalcNumHeteroatoms(mol)
        return carbon_count / hydrogen_count


def rule11_carboxylic_acid_group(mol):
    carboxylic_acid_smarts = '[CX3](=O)[OX2H1]'
    carboxylic_acid_pattern = Chem.MolFromSmarts(carboxylic_acid_smarts)
    return len(mol.GetSubstructMatches(carboxylic_acid_pattern))


def rule12_chlorine_bromine_atoms(mol):
    num_chlorine_atoms = len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 17])
    num_bromine_atoms = len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 35])
    return num_chlorine_atoms + num_bromine_atoms


def rule13_rotatable_bonds_hb_acceptors_aromatic_rings(mol):
    return rdkit.Chem.rdMolDescriptors.CalcNumRotatableBonds(mol) + rdkit.Chem.rdMolDescriptors.CalcNumHBA(mol) + rdkit.Chem.rdMolDescriptors.CalcNumAromaticRings(mol)

def rule14_halogen_atoms(mol):
    halogens = [9, 17, 35, 53, 85]  # Atomic numbers of halogen atoms
    return len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() in halogens])

