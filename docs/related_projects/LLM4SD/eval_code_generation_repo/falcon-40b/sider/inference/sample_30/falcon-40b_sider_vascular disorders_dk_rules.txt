def rule1_carboxylic_acid(mol):
    pattern = Chem.MolFromSmarts('C(=O)[O;h1]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule2_nitrogen_atom(mol):
    pattern = Chem.MolFromSmarts('[#7]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule3_halogen_atom(mol):
    pattern = Chem.MolFromSmarts('[#9,#17,#35,#53]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule4_sulfur_atom(mol):
    pattern = Chem.MolFromSmarts('[#16]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule5_carbonyl_group(mol):
    pattern = Chem.MolFromSmarts('C=O')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule6_sulfonamide_group(mol):
    pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule7_metal_atoms(mol):
    pattern = Chem.MolFromSmarts('[#78,#81]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule8_nitrogen_sulfur_configurations(mol):
    pattern1 = Chem.MolFromSmarts('[#7R]')
    pattern2 = Chem.MolFromSmarts('[N+](=O)(-*)-*')
    pattern3 = Chem.MolFromSmarts('[#16H1]')
    pattern4 = Chem.MolFromSmarts('[#16X2H0](-[#16X2H0])')
    if pattern1 is not None and pattern2 is not None and pattern3 is not None and pattern4 is not None:
        matches1 = mol.GetSubstructMatches(pattern1)
        matches2 = mol.GetSubstructMatches(pattern2)
        matches3 = mol.GetSubstructMatches(pattern3)
        matches4 = mol.GetSubstructMatches(pattern4)
        return len(matches1) + len(matches2) + len(matches3) + len(matches4)
    else:
        return 0

