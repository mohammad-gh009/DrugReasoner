def rule1_halogen_atoms(mol):
    halogens = ['F', 'Cl', 'Br', 'I']
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() in halogens)

def rule2_nitrogen_atoms(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N')

def rule3_sulfur_atoms(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'S')

def rule4_carboxylic_acid(mol):
    pattern = Chem.MolFromSmarts('C(=O)[O;h1]')
    return len(mol.GetSubstructMatches(pattern))

def rule5_hydrogen_bonds(mol):
    return rdMolDescriptors.CalcNumHBD(mol) + rdMolDescriptors.CalcNumHBA(mol)

def rule6_nitrogen_special(mol):
    pattern1 = Chem.MolFromSmarts('[r5,r6]~[N;X3]')
    pattern2 = Chem.MolFromSmarts('[N;X4]')
    return len(mol.GetSubstructMatches(pattern1)) + len(mol.GetSubstructMatches(pattern2))

def rule7_sulfur_special(mol):
    pattern1 = Chem.MolFromSmarts('S(=O)(=O)N')
    pattern2 = Chem.MolFromSmarts('S(=O)(=O)-*')
    return len(mol.GetSubstructMatches(pattern1)) + len(mol.GetSubstructMatches(pattern2))


def rule8_positive_charge_nitrogen(mol):
    positive_nitrogen_count = 0
    for atom in mol.GetAtoms():
        if atom.GetAtomicNum() == 7 and atom.GetFormalCharge() > 0:
            positive_nitrogen_count += 1
    return positive_nitrogen_count

def rule9_negative_charge_oxygen(mol):
    negative_oxygen_count = 0
    for atom in mol.GetAtoms():
        if atom.GetAtomicNum() == 8 and atom.GetFormalCharge() < 0:
            negative_oxygen_count += 1
    return negative_oxygen_count

def rule10_positive_charge_sulfur(mol):
    positive_sulfur_count = 0
    for atom in mol.GetAtoms():
        if atom.GetAtomicNum() == 16 and atom.GetFormalCharge() > 0:
            positive_sulfur_count += 1
    return positive_sulfur_count

def rule11_functional_groups(mol):
    amines = mol.GetSubstructMatches(Chem.MolFromSmarts('N'))
    sulfonamides = mol.GetSubstructMatches(Chem.MolFromSmarts('S(=O)(=O)N'))
    carboxylic_acids = mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)O'))
    return len(amines) + len(sulfonamides) + len(carboxylic_acids)

def rule12_hb_acceptors_donors(mol):
    return rdMolDescriptors.CalcNumHBA(mol) + rdMolDescriptors.CalcNumHBD(mol)

def rule13_molecular_weight(mol):
    return rdMolDescriptors.CalcExactMolWt(mol)

def rule15_positive_label(mol):
    nitrogen_atoms = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#7]')))
    chlorine_atoms = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#17]')))
    sulfur_atoms = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#16]')))
    return nitrogen_atoms + chlorine_atoms + sulfur_atoms

def rule16_long_carbon_chain(mol):
    carbon_atoms = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]')))
    return carbon_atoms

def rule17_charge_polar_group(mol):
    positive_charge = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[+]')))
    negative_charge = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[-]')))
    polar_group = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#7,#8,#16]')))
    return positive_charge + negative_charge + polar_group

def rule18_aromatic_rings_heteroatoms(mol):
    aromatic_rings = rdMolDescriptors.CalcNumAromaticRings(mol)
    heteroatoms = rdMolDescriptors.CalcNumHeteroatoms(mol)
    return aromatic_rings + heteroatoms

def rule19_long_chains_branches(mol):
    long_chains = rdMolDescriptors.CalcNumAliphaticRings(mol)
    branches = rdMolDescriptors.CalcNumRotatableBonds(mol)
    return long_chains + branches

def rule20_hb_donors_rotatable_bonds_aromatic_rings(mol):
    hb_donors = rdMolDescriptors.CalcNumHBD(mol)
    rotatable_bonds = rdMolDescriptors.CalcNumRotatableBonds(mol)
    aromatic_rings = rdMolDescriptors.CalcNumAromaticRings(mol)
    return hb_donors + rotatable_bonds + aromatic_rings

def rule21_nitrogen_long_carbon_chain(mol):
    nitrogen_atoms = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#7]')))
    carbon_atoms = len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]')))
