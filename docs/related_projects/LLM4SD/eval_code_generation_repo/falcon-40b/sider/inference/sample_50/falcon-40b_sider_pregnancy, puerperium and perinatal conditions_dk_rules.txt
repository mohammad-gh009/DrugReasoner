def rule1_nitrogen(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('N')))

def rule2_chlorine(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('Cl')))

def rule3_sulfur(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('S')))

def rule4_carboxylic_acid(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)O')))

def rule5_halogen(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[F,Cl,Br,I]')))

def rule6_sulfonamide(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('S(=O)(=O)N')))

def rule7_benzene(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('c1ccccc1')))

def rule8_cyclic(mol):
    return Descriptors.RingCount(mol)

def rule9_hb_donors_acceptors(mol):
    hb_donors = rdMolDescriptors.CalcNumHBD(mol)
    hb_acceptors = rdMolDescriptors.CalcNumHBA(mol)
    return hb_donors + hb_acceptors

def rule10_rings_branches(mol):
    rings = rdMolDescriptors.CalcNumRings(mol)
    branches = rdMolDescriptors.CalcNumRotatableBonds(mol) - rings
    return rings + branches

def rule11_functional_groups(mol):
    amines = len(mol.GetSubstructMatches(Chem.MolFromSmarts('N')))
    sulfonamides = len(mol.GetSubstructMatches(Chem.MolFromSmarts('S(=O)(=O)N')))
    carboxylic_acids = len(mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)O')))
    return amines + sulfonamides + carboxylic_acids

def rule12_complexity(mol):
    chiral_centers = len(Chem.FindMolChiralCenters(mol, includeUnassigned=True))
    long_chains = rdMolDescriptors.CalcNumAliphaticCarbocycles(mol)
    return chiral_centers + long_chains

def rule13_rotatable_bonds(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule14_adverse_elements(mol):
    nitrogen = len(mol.GetSubstructMatches(Chem.MolFromSmarts('N')))
    chlorine = len(mol.GetSubstructMatches(Chem.MolFromSmarts('Cl')))
    sulfur = len(mol.GetSubstructMatches(Chem.MolFromSmarts('S')))
    return nitrogen + chlorine + sulfur

def rule15_polar_groups(mol):
    carboxylic_acids = len(mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)O')))
    amines = len(mol.GetSubstructMatches(Chem.MolFromSmarts('N')))
    esters = len(mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)O')))
    return carboxylic_acids + amines + esters

def rule16_metal_ions(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#50,#82,#29,#30,#78,#80,#47,#28,#27,#79,#48,#77,#46,#92,#58,#56,#81,#49]')))

def rule17_aromatic_rings_heteroatoms(mol):
    aromatic_rings = rdMolDescriptors.CalcNumAromaticRings(mol)
    heteroatoms = rdMolDescriptors.CalcNumHeteroatoms(mol)

def rule18_long_chains(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule19_nitro_group(mol):
    nitro_pattern = Chem.MolFromSmarts('[N+](=O)[O-]')
    return len(mol.GetSubstructMatches(nitro_pattern))

def rule20_nitrogen_heterocyclic(mol):
    nitrogen_heterocyclic_pattern = Chem.MolFromSmarts('[n]')
    return len(mol.GetSubstructMatches(nitrogen_heterocyclic_pattern))

def rule21_carbon_atoms(mol):
    return rdMolDescriptors.CalcNumAliphaticCarbocycles(mol)

def rule22_benzene_ring(mol):
    benzene_pattern = Chem.MolFromSmarts('c1ccccc1')
    return len(mol.GetSubstructMatches(benzene_pattern))

def rule23_oxygen_atoms(mol):
    return rdMolDescriptors.CalcNumAliphaticHeterocycles(mol)

def rule24_nitrogen_atoms(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N' and atom.GetIsAromatic() == False)


def rule26_oxygen_count(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('O')))

def rule27_hb_donors_acceptors_mw(mol):
    hb_donors = rdMolDescriptors.CalcNumHBD(mol)
    hb_acceptors = rdMolDescriptors.CalcNumHBA(mol)
    mw = rdMolDescriptors.CalcExactMolWt(mol)
    return hb_donors, hb_acceptors, mw

def rule28_carbonyl_group(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('C=O')))

def rule29_sulfonamide_group(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('S(=O)(=O)N')))

def rule30_nitrogen_atom(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('N')))

def rule1_aromatic_rings_heteroatoms(mol):
    aromatic_rings = rdMolDescriptors.CalcNumAromaticRings(mol)
    heteroatoms = rdMolDescriptors.CalcNumHeteroatoms(mol)
    return aromatic_rings, heteroatoms

def rule2_polar_functional_groups(mol):
    carboxylic_acids = len(mol.GetSubstructMatches(Chem.MolFromSmiles('C(=O)O')))
    amines = len(mol.GetSubstructMatches(Chem.MolFromSmiles('N')))
    esters = len(mol.GetSubstructMatches(Chem.MolFromSmiles('C(=O)OC')))
    return carboxylic_acids, amines, esters

def rule3_chiral_centers_stereogenic_atoms(mol):
    chiral_centers = len(Chem.FindMolChiralCenters(mol, includeUnassigned=True))
    return chiral_centers

def rule5_halogen_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("[#9,#17,#35,#53]")))

def rule6_platinum_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("[#78]")))

def rule7_nitrogen_heterocyclic_sulfonamide(mol):
    nitrogen_heterocyclic = len(mol.GetSubstructMatches(Chem.MolFromSmarts("[nR]")))
    sulfonamide = len(mol.GetSubstructMatches(Chem.MolFromSmarts("S(=O)(=O)N")))
    return nitrogen_heterocyclic + sulfonamide



def rule11_nitro_group(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("N(=O)=O")))

def rule12_halogen_metal_ions(mol):
    halogens = len(mol.GetSubstructMatches(Chem.MolFromSmarts("[#9,#17,#35,#53]")))
    metal_ions = len(mol.GetSubstructMatches(Chem.MolFromSmarts("[#26,#30]")))
    return halogens + metal_ions

def rule13_complex_molecules(mol):
    aromatic_rings = len(mol.GetSubstructMatches(Chem.MolFromSmarts("c1ccccc1")))
    heterocyclic_rings = len(mol.GetSubstructMatches(Chem.MolFromSmarts("[r5,r6]")))
    polar_groups = len(mol.GetSubstructMatches(Chem.MolFromSmarts("[F,Cl,Br,I,N,O,S]")))
    halogens = len(mol.GetSubstructMatches(Chem.MolFromSmarts("[#9,#17,#35,#53]")))
