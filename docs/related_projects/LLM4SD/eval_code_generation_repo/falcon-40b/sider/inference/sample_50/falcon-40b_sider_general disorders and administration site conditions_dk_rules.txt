def rule1_halogen_atoms(mol):
    halogen_atoms = ['F', 'Cl', 'Br', 'I']
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() in halogen_atoms)

def rule2_nitrogen_atoms(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N')

def rule3_sulfur_atoms(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'S')

def rule4_carboxylic_acid(mol):
    pattern = Chem.MolFromSmarts('C(=O)O')
    return len(mol.GetSubstructMatches(pattern))

def rule5_nitrogen_atoms(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N')

def rule6_hydrogen_bonds(mol):
    return rdMolDescriptors.CalcNumHBD(mol) + rdMolDescriptors.CalcNumHBA(mol)

def rule7_halogen_atoms(mol):
    halogen_atoms = ['F', 'Cl', 'Br', 'I']
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() in halogen_atoms)

def rule8_nitrogen_atoms(mol):
    pattern1 = Chem.MolFromSmarts('[nR]')
    pattern2 = Chem.MolFromSmarts('[N+](=*,*)(-*)-*,*')
    return len(mol.GetSubstructMatches(pattern1)) + len(mol.GetSubstructMatches(pattern2))

def rule9_sulfur_atoms(mol):
    pattern1 = Chem.MolFromSmarts('S(=*,*)(-*)-*,*')
    pattern2 = Chem.MolFromSmarts('S(=O)(=O)(-*)-*,*')
    return len(mol.GetSubstructMatches(pattern1)) + len(mol.GetSubstructMatches(pattern2))

def rule10_positive_charge_nitrogen(mol):
    positive_nitrogen_count = 0
    for atom in mol.GetAtoms():
        if atom.GetAtomicNum() == 7 and atom.GetFormalCharge() > 0:
            positive_nitrogen_count += 1
    return positive_nitrogen_count

def rule11_negative_charge_oxygen(mol):
    negative_oxygen_count = 0
    for atom in mol.GetAtoms():
        if atom.GetAtomicNum() == 8 and atom.GetFormalCharge() < 0:
            negative_oxygen_count += 1
    return negative_oxygen_count

def rule12_positive_charge_sulfur(mol):
    positive_sulfur_count = 0
    for atom in mol.GetAtoms():
        if atom.GetAtomicNum() == 16 and atom.GetFormalCharge() > 0:
            positive_sulfur_count += 1
    return positive_sulfur_count

def rule13_functional_groups(mol):
    amines = mol.GetSubstructMatches(Chem.MolFromSmarts('N'))
    sulfonamides = mol.GetSubstructMatches(Chem.MolFromSmarts('S(=O)(=O)N'))
    carboxylic_acids = mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)O'))
    return len(amines) + len(sulfonamides) + len(carboxylic_acids)

def rule14_hb_acceptor_donor(mol):
    return rdMolDescriptors.CalcNumHBA(mol) + rdMolDescriptors.CalcNumHBD(mol)

def rule15_molecular_weight(mol):
    return Descriptors.MolWt(mol)

def rule16_structural_complexity(mol):
    return Descriptors.FpDensityMorgan1(mol)

def rule17_positive_label_nitrogen(mol):
    nitrogen_count = 0
    for atom in mol.GetAtoms():
        if atom.GetAtomicNum() == 7:
            nitrogen_count += 1
    return nitrogen_count

def rule18_positive_label_chlorine(mol):
    chlorine_count = 0
    for atom in mol.GetAtoms():
        if atom.GetAtomicNum() == 17:
            chlorine_count += 1
    return chlorine_count

def rule19_positive_label_sulfur(mol):
    sulfur_count = 0
    for atom in mol.GetAtoms():
        if atom.GetAtomicNum() == 16:
            sulfur_count += 1

def rule20_long_carbon_chain(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]')))

def rule21_chlorine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#17]')))

def rule22_carboxylic_acid_group(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)[O;h1]')))

def rule23_nitrogen_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#7]')))

def rule24_halogen_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#9,#17,#35,#53]')))



def rule26_negative_charge(mol):
    negative_charges = sum(1 for atom in mol.GetAtoms() if atom.GetFormalCharge() < 0)
    return negative_charges


def rule27_polar_group(mol):
    return rdMolDescriptors.CalcNumHBD(mol) + rdMolDescriptors.CalcNumHBA(mol)

def rule28_aromatic_rings_heteroatoms(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol) + rdMolDescriptors.CalcNumHeteroatoms(mol)

def rule30_positive_charge(mol):
    return rdkit.Chem.rdmolops.GetFormalCharge(mol)

def rule31_nitrogen_presence(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('N')))

def rule32_sulfur_presence(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('S')))

def rule33_high_hb_donors(mol):
    return rdMolDescriptors.CalcNumHBD(mol)

def rule34_high_rotatable_bonds(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule35_high_aromatic_rings(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule37_high_carbon_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmiles('C')))

def rule38_amine_carboxylic_acid(mol):
    amine = len(mol.GetSubstructMatches(Chem.MolFromSmiles('N')))
    carboxylic_acid = len(mol.GetSubstructMatches(Chem.MolFromSmiles('C(=O)O')))
    return amine + carboxylic_acid

def rule39_halogen_atoms(mol):
    fluorine = len(mol.GetSubstructMatches(Chem.MolFromSmiles('F')))
    chlorine = len(mol.GetSubstructMatches(Chem.MolFromSmiles('Cl')))
    bromine = len(mol.GetSubstructMatches(Chem.MolFromSmiles('Br')))
    iodine = len(mol.GetSubstructMatches(Chem.MolFromSmiles('I')))

def rule40_carboxylic_acid(mol):
    pattern = Chem.MolFromSmarts('C(=O)[O;h1]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule41_positive_charge(mol):
    pattern = Chem.MolFromSmarts('[N+]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule42_negative_charge(mol):
    pattern = Chem.MolFromSmarts('[O-]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def rule43_carboxylic_acid_or_derivatives(mol):
    pattern1 = Chem.MolFromSmarts('C(=O)[O;h1]')
    pattern2 = Chem.MolFromSmarts('C(=O)[O;h0]')
    matches1 = mol.GetSubstructMatches(pattern1)
    matches2 = mol.GetSubstructMatches(pattern2)
    return len(matches1) + len(matches2)

def rule44_nitrogen_in_amine_or_amide(mol):
    pattern1 = Chem.MolFromSmarts('[N;H2]')
    pattern2 = Chem.MolFromSmarts('[N;H1]')
    matches1 = mol.GetSubstructMatches(pattern1)
    matches2 = mol.GetSubstructMatches(pattern2)
    return len(matches1) + len(matches2)

def rule45_sulfur_in_sulfonamide_or_sulfone(mol):
    pattern1 = Chem.MolFromSmarts('[S;D4]')
    pattern2 = Chem.MolFromSmarts('[S;D3]')
    matches1 = mol.GetSubstructMatches(pattern1)
    matches2 = mol.GetSubstructMatches(pattern2)
    return len(matches1) + len(matches2)

def rule46_hba_hbd(mol):
    return rdMolDescriptors.CalcNumHBA(mol) + rdMolDescriptors.CalcNumHBD(mol)

def rule47_rotatable_bonds(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule48_aromatic_rings(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule49_positive_charge(mol):
    pattern = Chem.MolFromSmarts('[+]')
    matches = mol.GetSubstructMatches(pattern)

def rule50_negative_charge(mol):
    return Chem.rdmolops.GetFormalCharge(mol)

def rule51_functional_groups(mol):
    amines = mol.GetSubstructMatches(Chem.MolFromSmarts('N'))
    carboxylic_acids = mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)O'))
    return len(amines) + len(carboxylic_acids)

def rule1_hb_acceptors(mol):
    return rdMolDescriptors.CalcNumHBA(mol)

def rule2_hb_donors(mol):
    return rdMolDescriptors.CalcNumHBD(mol)

def rule3_substructures(mol):
    substructures = mol.GetSubstructMatches(Chem.MolFromSmarts('c1ccccc1'))
    return len(substructures)

def rule6_halogen_atoms(mol):
    halogens = mol.GetSubstructMatches(Chem.MolFromSmarts('[#9,#17,#35,#53]'))
    return len(halogens)

def rule7_metal_ions(mol):
    metals = mol.GetSubstructMatches(Chem.MolFromSmarts('[#30,#12,#33]'))
    return len(metals)

def rule8_nitrogen_atoms(mol):
    nitrogens = mol.GetSubstructMatches(Chem.MolFromSmarts('[N;X3]'))

def rule9_sulfur_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("[#16]")))

def rule16_nitrogen_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("[#7]")))

def rule17_chlorine_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("[#17]")))

def rule18_sulfur_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("[#16]")))
