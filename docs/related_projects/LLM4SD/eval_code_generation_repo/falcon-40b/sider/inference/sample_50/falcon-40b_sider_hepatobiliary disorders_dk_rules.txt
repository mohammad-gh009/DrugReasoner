def rule1_carboxylic_acid(mol):
    carboxylic_acid_pattern = Chem.MolFromSmarts('C(=O)[O;h1]')
    return len(mol.GetSubstructMatches(carboxylic_acid_pattern))

def rule2_nitrogen_atom(mol):
    nitrogen_pattern = Chem.MolFromSmarts('[#7]')
    return len(mol.GetSubstructMatches(nitrogen_pattern))

def rule3_halogen_atom(mol):
    halogen_pattern = Chem.MolFromSmarts('[#9,#17,#35,#53]')
    return len(mol.GetSubstructMatches(halogen_pattern))

def rule4_sulfonamide_group(mol):
    sulfonamide_pattern = Chem.MolFromSmarts('S(=O)(=O)N')
    return len(mol.GetSubstructMatches(sulfonamide_pattern))

def rule5_chlorine_atom(mol):
    chlorine_pattern = Chem.MolFromSmarts('[#17]')
    return len(mol.GetSubstructMatches(chlorine_pattern))

def rule6_sulfur_atom(mol):
    sulfur_pattern = Chem.MolFromSmarts('[#16]')
    return len(mol.GetSubstructMatches(sulfur_pattern))



def rule8_long_side_chain(mol):
    long_side_chain_pattern = Chem.MolFromSmarts('C(CCCCC)')
    return len(mol.GetSubstructMatches(long_side_chain_pattern))

def rule9_nitrogen_atom(mol):
    return rule2_nitrogen_atom(mol)

def rule10_adverse_effects(mol):
    hb_donors = rdMolDescriptors.CalcNumHBD(mol)
    hb_acceptors = rdMolDescriptors.CalcNumHBA(mol)
    aromatic_rings = rdMolDescriptors.CalcNumAromaticRings(mol)
    polar_atoms = rdMolDescriptors.CalcNumHeteroatoms(mol)

def rule11_carbonyl_group(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('C=O')))

def rule12_nitrogen_hb(mol):
    num_nitrogen_atoms = len(mol.GetSubstructMatches(rdkit.Chem.MolFromSmiles('N')))
    return num_nitrogen_atoms + rdMolDescriptors.CalcNumHBA(mol) + rdMolDescriptors.CalcNumHBD(mol)


def rule13_rotatable_bonds(mol):
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def rule14_nitro_group(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('N(=O)=O')))

def rule15_aliphatic_chain_carboxylic_acid(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('CCCCC'))) + len(mol.GetSubstructMatches(Chem.MolFromSmarts('C(=O)O')))

def rule16_platinum_group(mol):
    return len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 78])


def rule17_middle_nitrogen(mol):
    return len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 7 and atom.GetDegree() > 1])

def rule18_end_chlorine(mol):
    return len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 17 and atom.GetDegree() == 1])

def rule19_end_carbonyl(mol):
    return len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6 and atom.GetDegree() == 1 and 'O' in [neighbor.GetSymbol() for neighbor in atom.GetNeighbors()]])
