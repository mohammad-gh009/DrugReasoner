

def rule2_carbon_atoms(mol):
    return len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 6])


def rule3_oxygen_atoms(mol):
    oxygen = Chem.MolFromSmiles('O')
    return len(mol.GetSubstructMatches(oxygen))


def rule4_nitrogen_atoms(mol):
    return len([atom for atom in mol.GetAtoms() if atom.GetAtomicNum() == 7])


def rule6_halogen_atoms(mol):
    halogens = [5, 9, 17, 35, 53]
    return sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() in halogens)

def rule7_alkali_metal_atoms(mol):
    alkali_metals = [3, 11, 19, 37, 55, 87]
    return sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() in alkali_metals)

def rule8_alkaline_earth_metal_atoms(mol):
    alkaline_earth_metals = [4, 12, 20, 38, 56, 88]
    return sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() in alkaline_earth_metals)

def rule9_transition_metal_atoms(mol):
    transition_metals = list(range(21, 31)) + list(range(39, 49)) + list(range(72, 81)) + list(range(104, 113))
    return sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() in transition_metals)

def rule10_lanthanide_atoms(mol):
    lanthanides = list(range(57, 72))
    return sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() in lanthanides)

def rule11_actinide_atoms(mol):
    actinides = list(range(89, 104))
    return sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() in actinides)

def rule12_chalcogen_atoms(mol):
    chalcogens = [8, 16, 34, 52, 84]
    return sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() in chalcogens)

def rule13_metalloid_atoms(mol):
    metalloids = [5, 14, 32, 33, 51, 52, 85]
    return sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() in metalloids)

def rule14_non_metal_atoms(mol):
    non_metals = [1, 6, 7, 8, 15, 16, 34]
    return sum(1 for atom in mol.GetAtoms() if atom.GetAtomicNum() in non_metals)

def rule16_aliphatic_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("[A]")))

def rule17_cyclic_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("[R]")))

def rule18_linear_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("[D2]")))

def rule19_branched_atoms(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts("[D3,D4]")))

def rule20_saturated_atoms(mol):
    pattern = Chem.MolFromSmarts("[D2,D3,D4]")

    if pattern is not None:
        return len(mol.GetSubstructMatches(pattern))
    else:
        return 0


def rule21_unsaturated_atoms(mol):
    try:
        return len(mol.GetSubstructMatches(Chem.MolFromSmarts("[#6,#7,#8,#16]")))
    except:
        return 0


def rule22_double_bonds(mol):
    try:
        o_bonds = Chem.MolFromSmarts("=O")
        c_bonds = Chem.MolFromSmarts("=C")
        if o_bonds is not None and c_bonds is not None:
            return len(mol.GetSubstructMatches(o_bonds)) + len(mol.GetSubstructMatches(c_bonds))
        else:
            return 0
    except:
        return 0




def rule25_aliphatic_bonds(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]~[#6]')))

def rule26_cyclic_bonds(mol):
    return mol.GetRingInfo().NumRings()

def rule27_linear_bonds(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]-[#6]-[#6]')))

def rule28_branched_bonds(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6](-[#6])(-[#6])-[#6]')))

def rule29_saturated_bonds(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]-[#6]')))

def rule30_unsaturated_bonds(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]:[#6]')))

def rule31_double_bonds(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]=[#6]')))

def rule32_triple_bonds(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]#[#6]')))

def rule33_aromatic_bonds(mol):
    return len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]:[#6]:[#6]')))

def rule35_cyclic_bonds(mol):
    return len(mol.GetRingInfo().BondRings())

def rule36_linear_bonds(mol):
    return len([bond for bond in mol.GetBonds() if bond.GetBondType() == Chem.rdchem.BondType.SINGLE])

def rule37_branched_bonds(mol):
    return len([atom for atom in mol.GetAtoms() if atom.GetDegree() > 2])

def rule38_saturated_bonds(mol):
    return len([bond for bond in mol.GetBonds() if bond.GetIsAromatic() == False and bond.GetBondType() != Chem.rdchem.BondType.DOUBLE and bond.GetBondType() != Chem.rdchem.BondType.TRIPLE])

def rule39_unsaturated_bonds(mol):
    return len([bond for bond in mol.GetBonds() if bond.GetIsAromatic() == False and (bond.GetBondType() == Chem.rdchem.BondType.DOUBLE or bond.GetBondType() == Chem.rdchem.BondType.TRIPLE)])

def rule40_double_bonds(mol):
    return len([bond for bond in mol.GetBonds() if bond.GetBondType() == Chem.rdchem.BondType.DOUBLE])

def rule41_triple_bonds(mol):
    return len([bond for bond in mol.GetBonds() if bond.GetBondType() == Chem.rdchem.BondType.TRIPLE])

def rule42_aromatic_bonds(mol):
    return len([bond for bond in mol.GetBonds() if bond.GetIsAromatic()])

def rule44_cyclic_bonds(mol):
    return rdMolDescriptors.CalcNumAliphaticRings(mol)

def rule45_linear_bonds(mol):
    return mol.GetNumBonds() - rdMolDescriptors.CalcNumAliphaticRings(mol)

def rule46_branched_bonds(mol):
    return mol.GetNumBonds() - rdMolDescriptors.CalcNumAliphaticRings(mol) - (mol.GetNumBonds() - rdMolDescriptors.CalcNumAliphaticRings(mol))

def rule47_saturated_bonds(mol):
    return rdMolDescriptors.CalcNumAliphaticHeterocycles(mol)

def rule48_unsaturated_bonds(mol):
    return rdMolDescriptors.CalcNumAromaticRings(mol)

def rule49_double_bonds(mol):
    return len([bond for bond in mol.GetBonds() if bond.GetBondType() == Chem.rdchem.BondType.DOUBLE])
